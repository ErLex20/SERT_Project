
SERTMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b0  080078b0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b8  080078b8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080078c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004208  200000c0  0800797c  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200042c8  0800797c  000242c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186f8  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003002  00000000  00000000  000387e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025621  00000000  00000000  0003de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170f6  00000000  00000000  00063441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8264  00000000  00000000  0007a537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016279b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  001627ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800775c 	.word	0x0800775c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000c4 	.word	0x200000c4
 800021c:	0800775c 	.word	0x0800775c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b974 	b.w	8000e5c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	468e      	mov	lr, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d14d      	bne.n	8000c36 <__udivmoddi4+0xaa>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	d969      	bls.n	8000c74 <__udivmoddi4+0xe8>
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	b152      	cbz	r2, 8000bbc <__udivmoddi4+0x30>
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bba:	4094      	lsls	r4, r2
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	0c21      	lsrs	r1, r4, #16
 8000bc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc6:	fa1f f78c 	uxth.w	r7, ip
 8000bca:	fb08 e316 	mls	r3, r8, r6, lr
 8000bce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bd2:	fb06 f107 	mul.w	r1, r6, r7
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be2:	f080 811f 	bcs.w	8000e24 <__udivmoddi4+0x298>
 8000be6:	4299      	cmp	r1, r3
 8000be8:	f240 811c 	bls.w	8000e24 <__udivmoddi4+0x298>
 8000bec:	3e02      	subs	r6, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a5b      	subs	r3, r3, r1
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f707 	mul.w	r7, r0, r7
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x92>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c10:	f080 810a 	bcs.w	8000e28 <__udivmoddi4+0x29c>
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	f240 8107 	bls.w	8000e28 <__udivmoddi4+0x29c>
 8000c1a:	4464      	add	r4, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	1be4      	subs	r4, r4, r7
 8000c24:	2600      	movs	r6, #0
 8000c26:	b11d      	cbz	r5, 8000c30 <__udivmoddi4+0xa4>
 8000c28:	40d4      	lsrs	r4, r2
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0xc2>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	f000 80ef 	beq.w	8000e1e <__udivmoddi4+0x292>
 8000c40:	2600      	movs	r6, #0
 8000c42:	e9c5 0100 	strd	r0, r1, [r5]
 8000c46:	4630      	mov	r0, r6
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	fab3 f683 	clz	r6, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d14a      	bne.n	8000cec <__udivmoddi4+0x160>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xd4>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80f9 	bhi.w	8000e52 <__udivmoddi4+0x2c6>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb61 0303 	sbc.w	r3, r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	469e      	mov	lr, r3
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d0e0      	beq.n	8000c30 <__udivmoddi4+0xa4>
 8000c6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c72:	e7dd      	b.n	8000c30 <__udivmoddi4+0xa4>
 8000c74:	b902      	cbnz	r2, 8000c78 <__udivmoddi4+0xec>
 8000c76:	deff      	udf	#255	; 0xff
 8000c78:	fab2 f282 	clz	r2, r2
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	f040 8092 	bne.w	8000da6 <__udivmoddi4+0x21a>
 8000c82:	eba1 010c 	sub.w	r1, r1, ip
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2601      	movs	r6, #1
 8000c90:	0c20      	lsrs	r0, r4, #16
 8000c92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c96:	fb07 1113 	mls	r1, r7, r3, r1
 8000c9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ca2:	4288      	cmp	r0, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	eb1c 0101 	adds.w	r1, ip, r1
 8000caa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x12a>
 8000cb0:	4288      	cmp	r0, r1
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2c0>
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	1a09      	subs	r1, r1, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x156>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x154>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2ca>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cea:	e79c      	b.n	8000c26 <__udivmoddi4+0x9a>
 8000cec:	f1c6 0720 	rsb	r7, r6, #32
 8000cf0:	40b3      	lsls	r3, r6
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000d02:	431c      	orrs	r4, r3
 8000d04:	40f9      	lsrs	r1, r7
 8000d06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d12:	0c20      	lsrs	r0, r4, #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fb09 1118 	mls	r1, r9, r8, r1
 8000d1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d20:	fb08 f00e 	mul.w	r0, r8, lr
 8000d24:	4288      	cmp	r0, r1
 8000d26:	fa02 f206 	lsl.w	r2, r2, r6
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b8>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2bc>
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2bc>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d58:	458e      	cmp	lr, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1e2>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2b4>
 8000d66:	458e      	cmp	lr, r1
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2b4>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d72:	fba0 9402 	umull	r9, r4, r0, r2
 8000d76:	eba1 010e 	sub.w	r1, r1, lr
 8000d7a:	42a1      	cmp	r1, r4
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46a6      	mov	lr, r4
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x2a4>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x2a0>
 8000d84:	b15d      	cbz	r5, 8000d9e <__udivmoddi4+0x212>
 8000d86:	ebb3 0208 	subs.w	r2, r3, r8
 8000d8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d92:	fa22 f306 	lsr.w	r3, r2, r6
 8000d96:	40f1      	lsrs	r1, r6
 8000d98:	431f      	orrs	r7, r3
 8000d9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9e:	2600      	movs	r6, #0
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	f1c2 0320 	rsb	r3, r2, #32
 8000daa:	40d8      	lsrs	r0, r3
 8000dac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db0:	fa21 f303 	lsr.w	r3, r1, r3
 8000db4:	4091      	lsls	r1, r2
 8000db6:	4301      	orrs	r1, r0
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc8:	0c0b      	lsrs	r3, r1, #16
 8000dca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dce:	fb00 f60e 	mul.w	r6, r0, lr
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x260>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b8>
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b8>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	b289      	uxth	r1, r1
 8000df0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df4:	fb07 3316 	mls	r3, r7, r6, r3
 8000df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x28a>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000e12:	3e02      	subs	r6, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0x104>
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e705      	b.n	8000c30 <__udivmoddi4+0xa4>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e3      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6f8      	b.n	8000c1e <__udivmoddi4+0x92>
 8000e2c:	454b      	cmp	r3, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f8>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f8>
 8000e3c:	4646      	mov	r6, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x28a>
 8000e40:	4620      	mov	r0, r4
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1e2>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x260>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b8>
 8000e4c:	3b02      	subs	r3, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x12c>
 8000e52:	4630      	mov	r0, r6
 8000e54:	e709      	b.n	8000c6a <__udivmoddi4+0xde>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x156>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vApplicationGetIdleTaskMemory+0x30>)
 8000e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	20000190 	.word	0x20000190

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f001 f968 	bl	800216e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f84d 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f000 f921 	bl	80010e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ea6:	f000 f8b1 	bl	800100c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000eaa:	f000 f8ed 	bl	8001088 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <main+0x90>)
 8000eb0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ec2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 fbdb 	bl	8005684 <osThreadCreate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <main+0x94>)
 8000ed2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(task_spi, start_task_spi, TASK_SPI_PRIO , 0, 128);
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <main+0x98>)
 8000ed6:	f107 0420 	add.w	r4, r7, #32
 8000eda:	461d      	mov	r5, r3
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_SPITransmitHandle = osThreadCreate(osThread(task_spi), NULL);
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fbc8 	bl	8005684 <osThreadCreate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <main+0x9c>)
 8000ef8:	6013      	str	r3, [r2, #0]

  osThreadDef(task_heartbeat, start_task_heartbeat, TASK_HEARTBEAT_PRIO, 0, 128);
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0xa0>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	461d      	mov	r5, r3
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_HeartbeatHandle = osThreadCreate(osThread(task_heartbeat), NULL);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 fbb7 	bl	8005684 <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <main+0xa4>)
 8000f1a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f1c:	f004 fbab 	bl	8005676 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <main+0x8c>
 8000f22:	bf00      	nop
 8000f24:	0800779c 	.word	0x0800779c
 8000f28:	20000480 	.word	0x20000480
 8000f2c:	080077b8 	.word	0x080077b8
 8000f30:	20000514 	.word	0x20000514
 8000f34:	080077d4 	.word	0x080077d4
 8000f38:	20000484 	.word	0x20000484

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 ff8d 	bl	8006e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <SystemClock_Config+0xc8>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <SystemClock_Config+0xc8>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SystemClock_Config+0xc8>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <SystemClock_Config+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <SystemClock_Config+0xcc>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <SystemClock_Config+0xcc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fac:	23d8      	movs	r3, #216	; 0xd8
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fbd9 	bl	8002774 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fc8:	f000 fe7e 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2103      	movs	r1, #3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fe66 	bl	8002cbc <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ff6:	f000 fe67 	bl	8001cc8 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_SPI1_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <MX_SPI1_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_SPI1_Init+0x74>)
 8001018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_SPI1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_SPI1_Init+0x74>)
 8001026:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800102a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_SPI1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_SPI1_Init+0x74>)
 800103a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800103e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_SPI1_Init+0x74>)
 8001042:	2238      	movs	r2, #56	; 0x38
 8001044:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_SPI1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_SPI1_Init+0x74>)
 800105a:	2207      	movs	r2, #7
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_SPI1_Init+0x74>)
 8001066:	2208      	movs	r2, #8
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_SPI1_Init+0x74>)
 800106c:	f002 fbc8 	bl	8003800 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fe27 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000394 	.word	0x20000394
 8001084:	40013000 	.word	0x40013000

08001088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_USART3_UART_Init+0x5c>)
 8001090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART3_UART_Init+0x58>)
 80010cc:	f003 fde6 	bl	8004c9c <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 fdf7 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003f8 	.word	0x200003f8
 80010e4:	40004800 	.word	0x40004800

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <MX_GPIO_Init+0x170>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a55      	ldr	r2, [pc, #340]	; (8001258 <MX_GPIO_Init+0x170>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <MX_GPIO_Init+0x170>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <MX_GPIO_Init+0x170>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <MX_GPIO_Init+0x170>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_GPIO_Init+0x170>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <MX_GPIO_Init+0x170>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a49      	ldr	r2, [pc, #292]	; (8001258 <MX_GPIO_Init+0x170>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <MX_GPIO_Init+0x170>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <MX_GPIO_Init+0x170>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a43      	ldr	r2, [pc, #268]	; (8001258 <MX_GPIO_Init+0x170>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_GPIO_Init+0x170>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <MX_GPIO_Init+0x170>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <MX_GPIO_Init+0x170>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_GPIO_Init+0x170>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_GPIO_Init+0x170>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a37      	ldr	r2, [pc, #220]	; (8001258 <MX_GPIO_Init+0x170>)
 800117c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_GPIO_Init+0x170>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f244 0181 	movw	r1, #16513	; 0x4081
 8001194:	4831      	ldr	r0, [pc, #196]	; (800125c <MX_GPIO_Init+0x174>)
 8001196:	f001 fab9 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4830      	ldr	r0, [pc, #192]	; (8001260 <MX_GPIO_Init+0x178>)
 80011a0:	f001 fab4 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	482a      	ldr	r0, [pc, #168]	; (8001264 <MX_GPIO_Init+0x17c>)
 80011bc:	f001 f90a 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4820      	ldr	r0, [pc, #128]	; (800125c <MX_GPIO_Init+0x174>)
 80011da:	f001 f8fb 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_GPIO_Init+0x178>)
 80011f6:	f001 f8ed 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4814      	ldr	r0, [pc, #80]	; (8001260 <MX_GPIO_Init+0x178>)
 800120e:	f001 f8e1 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001212:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001224:	230a      	movs	r3, #10
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <MX_GPIO_Init+0x180>)
 8001230:	f001 f8d0 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_GPIO_Init+0x180>)
 800124a:	f001 f8c3 	bl	80023d4 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020400 	.word	0x40020400
 8001260:	40021800 	.word	0x40021800
 8001264:	40020800 	.word	0x40020800
 8001268:	40020000 	.word	0x40020000

0800126c <start_task_spi>:

/* USER CODE BEGIN 4 */
void start_task_spi(void const * argument)
{
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af02      	add	r7, sp, #8
 8001272:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	TickType_t xTick;
	const TickType_t xPeriod = pdMS_TO_TICKS(TASK_SPI_PERIOD);
 8001274:	2332      	movs	r3, #50	; 0x32
 8001276:	617b      	str	r3, [r7, #20]


	for(;;)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4869      	ldr	r0, [pc, #420]	; (8001424 <start_task_spi+0x1b8>)
 800127e:	f001 fa45 	bl	800270c <HAL_GPIO_WritePin>

		/* SPI_Receive: data from slave */


		ret = HAL_SPI_Receive(&hspi1, (uint8_t *)&enc_value, (uint16_t)1, TASK_SPI_TIMER);
 8001282:	2328      	movs	r3, #40	; 0x28
 8001284:	2201      	movs	r2, #1
 8001286:	4968      	ldr	r1, [pc, #416]	; (8001428 <start_task_spi+0x1bc>)
 8001288:	4868      	ldr	r0, [pc, #416]	; (800142c <start_task_spi+0x1c0>)
 800128a:	f002 fcd2 	bl	8003c32 <HAL_SPI_Receive>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <start_task_spi+0x1c4>)
 8001294:	701a      	strb	r2, [r3, #0]

		 //---------------- START PID CODE -------------------//
		error = target - (double)enc_value;
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <start_task_spi+0x1c8>)
 8001298:	e9d3 4500 	ldrd	r4, r5, [r3]
 800129c:	4b62      	ldr	r3, [pc, #392]	; (8001428 <start_task_spi+0x1bc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8ff 	bl	80004a4 <__aeabi_ui2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffbb 	bl	8000228 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4960      	ldr	r1, [pc, #384]	; (8001438 <start_task_spi+0x1cc>)
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]
		d_error = pseudoDerivative(error, d, c);
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <start_task_spi+0x1cc>)
 80012be:	ed93 7b00 	vldr	d7, [r3]
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <start_task_spi+0x1d0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <start_task_spi+0x1d4>)
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	eeb0 0a47 	vmov.f32	s0, s14
 80012d2:	eef0 0a67 	vmov.f32	s1, s15
 80012d6:	f000 f90f 	bl	80014f8 <pseudoDerivative>
 80012da:	eeb0 7a40 	vmov.f32	s14, s0
 80012de:	eef0 7a60 	vmov.f32	s15, s1
 80012e2:	4b58      	ldr	r3, [pc, #352]	; (8001444 <start_task_spi+0x1d8>)
 80012e4:	ed83 7b00 	vstr	d7, [r3]
		enc_value = PID(newTick, error, d_error, Kp, Ki, Kd, S_u, S_du, S_i, PID_timeOn);
 80012e8:	4b57      	ldr	r3, [pc, #348]	; (8001448 <start_task_spi+0x1dc>)
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <start_task_spi+0x1cc>)
 80012ee:	ed93 0b00 	vldr	d0, [r3]
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <start_task_spi+0x1d8>)
 80012f4:	ed93 1b00 	vldr	d1, [r3]
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <start_task_spi+0x1e0>)
 80012fa:	ed93 2b00 	vldr	d2, [r3]
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <start_task_spi+0x1e4>)
 8001300:	ed93 3b00 	vldr	d3, [r3]
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <start_task_spi+0x1e8>)
 8001306:	ed93 4b00 	vldr	d4, [r3]
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <start_task_spi+0x1ec>)
 800130c:	ed93 5b00 	vldr	d5, [r3]
 8001310:	4b52      	ldr	r3, [pc, #328]	; (800145c <start_task_spi+0x1f0>)
 8001312:	ed93 6b00 	vldr	d6, [r3]
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <start_task_spi+0x1f4>)
 8001318:	ed93 7b00 	vldr	d7, [r3]
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <start_task_spi+0x1f8>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	e9cd 2300 	strd	r2, r3, [sp]
 8001326:	4608      	mov	r0, r1
 8001328:	f000 fae8 	bl	80018fc <PID>
 800132c:	ec53 2b10 	vmov	r2, r3, d0
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fbf2 	bl	8000b1c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <start_task_spi+0x1bc>)
 800133e:	701a      	strb	r2, [r3, #0]

		//printf("%lu\n",enc_value);

		if (enc_value < controlDeadzone)
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <start_task_spi+0x1bc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8bd 	bl	80004c4 <__aeabi_i2d>
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <start_task_spi+0x1fc>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fb94 	bl	8000a7c <__aeabi_dcmplt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <start_task_spi+0xf4>
		{
			enc_value = 0;
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <start_task_spi+0x1bc>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]

		//---------------- END PID CODE -------------------//



		if (ret == HAL_OK)
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <start_task_spi+0x1c4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d016      	beq.n	8001396 <start_task_spi+0x12a>
		{
			//printf("Task SPI: Receive OK\n");
			//printf("dato tx: %u\n", data_rx);
			//printf("dato rx: %u\n", data_rx);
		}
		else if (ret == HAL_ERROR)
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <start_task_spi+0x1c4>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d103      	bne.n	8001378 <start_task_spi+0x10c>
		{
			printf("Error\n");
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <start_task_spi+0x200>)
 8001372:	f005 fe85 	bl	8007080 <puts>
 8001376:	e00e      	b.n	8001396 <start_task_spi+0x12a>
		}
		else if (ret == HAL_BUSY)
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <start_task_spi+0x1c4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d103      	bne.n	8001388 <start_task_spi+0x11c>
		{
			printf("Busy\n");
 8001380:	483b      	ldr	r0, [pc, #236]	; (8001470 <start_task_spi+0x204>)
 8001382:	f005 fe7d 	bl	8007080 <puts>
 8001386:	e006      	b.n	8001396 <start_task_spi+0x12a>
		}
		else if (ret == HAL_TIMEOUT)
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <start_task_spi+0x1c4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d102      	bne.n	8001396 <start_task_spi+0x12a>
		{
			printf("Timeout\n");
 8001390:	4838      	ldr	r0, [pc, #224]	; (8001474 <start_task_spi+0x208>)
 8001392:	f005 fe75 	bl	8007080 <puts>

		/* SPI_Transmit: control to slave */



		ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&enc_value, (uint16_t)1, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	2201      	movs	r2, #1
 800139c:	4922      	ldr	r1, [pc, #136]	; (8001428 <start_task_spi+0x1bc>)
 800139e:	4823      	ldr	r0, [pc, #140]	; (800142c <start_task_spi+0x1c0>)
 80013a0:	f002 fad9 	bl	8003956 <HAL_SPI_Transmit>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <start_task_spi+0x1c4>)
 80013aa:	701a      	strb	r2, [r3, #0]

		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013ac:	bf00      	nop
 80013ae:	481f      	ldr	r0, [pc, #124]	; (800142c <start_task_spi+0x1c0>)
 80013b0:	f002 ff82 	bl	80042b8 <HAL_SPI_GetState>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1f9      	bne.n	80013ae <start_task_spi+0x142>

		if (ret == HAL_OK)
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <start_task_spi+0x1c4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <start_task_spi+0x184>
			//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
			//printf("MASTER: Task SPI: Transmit OK dato : %u\n", enc_value);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
			//HAL_Delay(100);
		}
		else if (ret == HAL_ERROR)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <start_task_spi+0x1c4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d103      	bne.n	80013d2 <start_task_spi+0x166>
		{
			printf("Error\n");
 80013ca:	4828      	ldr	r0, [pc, #160]	; (800146c <start_task_spi+0x200>)
 80013cc:	f005 fe58 	bl	8007080 <puts>
 80013d0:	e00e      	b.n	80013f0 <start_task_spi+0x184>
		}
		else if (ret == HAL_BUSY)
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <start_task_spi+0x1c4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d103      	bne.n	80013e2 <start_task_spi+0x176>
		{
			printf("Busy\n");
 80013da:	4825      	ldr	r0, [pc, #148]	; (8001470 <start_task_spi+0x204>)
 80013dc:	f005 fe50 	bl	8007080 <puts>
 80013e0:	e006      	b.n	80013f0 <start_task_spi+0x184>
		}
		else if (ret == HAL_TIMEOUT)
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <start_task_spi+0x1c4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d102      	bne.n	80013f0 <start_task_spi+0x184>
		{
			printf("Timeout\n");
 80013ea:	4822      	ldr	r0, [pc, #136]	; (8001474 <start_task_spi+0x208>)
 80013ec:	f005 fe48 	bl	8007080 <puts>
		}


		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2110      	movs	r1, #16
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <start_task_spi+0x1b8>)
 80013f6:	f001 f989 	bl	800270c <HAL_GPIO_WritePin>


		xTick = HAL_GetTick();
 80013fa:	f000 fed9 	bl	80021b0 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]
		if (time_after(xTick, TASK_SPI_DEADLINE + xLastWakeTime))
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	3332      	adds	r3, #50	; 0x32
 8001408:	2b00      	cmp	r3, #0
 800140a:	da04      	bge.n	8001416 <start_task_spi+0x1aa>
		{
			printf("Task SPI: Deadline not respected\n");
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <start_task_spi+0x20c>)
 800140e:	f005 fe37 	bl	8007080 <puts>
			panic();
 8001412:	f000 f833 	bl	800147c <panic>
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	6979      	ldr	r1, [r7, #20]
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fbf7 	bl	8005c10 <vTaskDelayUntil>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001422:	e729      	b.n	8001278 <start_task_spi+0xc>
 8001424:	40020000 	.word	0x40020000
 8001428:	20000510 	.word	0x20000510
 800142c:	20000394 	.word	0x20000394
 8001430:	20000390 	.word	0x20000390
 8001434:	20000030 	.word	0x20000030
 8001438:	200004c0 	.word	0x200004c0
 800143c:	20000040 	.word	0x20000040
 8001440:	20000044 	.word	0x20000044
 8001444:	200004c8 	.word	0x200004c8
 8001448:	20000488 	.word	0x20000488
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000010 	.word	0x20000010
 8001458:	20000018 	.word	0x20000018
 800145c:	20000020 	.word	0x20000020
 8001460:	20000028 	.word	0x20000028
 8001464:	200004d0 	.word	0x200004d0
 8001468:	20000038 	.word	0x20000038
 800146c:	080077f0 	.word	0x080077f0
 8001470:	080077f8 	.word	0x080077f8
 8001474:	08007800 	.word	0x08007800
 8001478:	08007808 	.word	0x08007808

0800147c <panic>:
	}
}
void panic(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <panic+0x14>)
 8001484:	f001 f95b 	bl	800273e <HAL_GPIO_TogglePin>
		HAL_Delay(PANIC_PERIOD);
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f000 fe9d 	bl	80021c8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800148e:	e7f7      	b.n	8001480 <panic+0x4>
 8001490:	40020400 	.word	0x40020400

08001494 <__io_putchar>:
	}
}

PUTCHAR_PROTOTYPE
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a2:	2201      	movs	r2, #1
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <__io_putchar+0x20>)
 80014a6:	f003 fc47 	bl	8004d38 <HAL_UART_Transmit>

  return ch;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200003f8 	.word	0x200003f8

080014b8 <start_task_heartbeat>:

void start_task_heartbeat(void const * argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	TickType_t xTick;
	const TickType_t xPeriod = pdMS_TO_TICKS(TASK_HEARTBEAT_PERIOD);
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c4:	617b      	str	r3, [r7, #20]

	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014c6:	2101      	movs	r1, #1
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <start_task_heartbeat+0x3c>)
 80014ca:	f001 f938 	bl	800273e <HAL_GPIO_TogglePin>
		//printf("HeartNeat Attivato\n");
		xTick = HAL_GetTick();
 80014ce:	f000 fe6f 	bl	80021b0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]
		if (time_after(xTick, TASK_HEARTBEAT_DEADLINE + xLastWakeTime))
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da01      	bge.n	80014e6 <start_task_heartbeat+0x2e>
		{
			//printf("Task Heartbeat: Deadline not respected\n");
			panic();
 80014e2:	f7ff ffcb 	bl	800147c <panic>
		}

		//printf("Task Heartbeat: OK\n");

		vTaskDelayUntil(&xLastWakeTime,xPeriod);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fb8f 	bl	8005c10 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014f2:	e7e8      	b.n	80014c6 <start_task_heartbeat+0xe>
 80014f4:	40020400 	.word	0x40020400

080014f8 <pseudoDerivative>:




double pseudoDerivative(double e, int d, int c)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  int i, j, k, num_empty = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28

  mediana = 0;
 800150a:	4ba7      	ldr	r3, [pc, #668]	; (80017a8 <pseudoDerivative+0x2b0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
  reset = 0;
 8001510:	4ba6      	ldr	r3, [pc, #664]	; (80017ac <pseudoDerivative+0x2b4>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

  for (i = 0; i < 10; i++)
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
 800151a:	e00b      	b.n	8001534 <pseudoDerivative+0x3c>
  {
	  if (mybuffer[i] == 0)
 800151c:	4aa4      	ldr	r2, [pc, #656]	; (80017b0 <pseudoDerivative+0x2b8>)
 800151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <pseudoDerivative+0x36>
	  {
		  num_empty++;
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	3301      	adds	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < 10; i++)
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	3301      	adds	r3, #1
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
 8001534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001536:	2b09      	cmp	r3, #9
 8001538:	ddf0      	ble.n	800151c <pseudoDerivative+0x24>
	  }
  }
  if (num_empty == 10)
 800153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d102      	bne.n	8001546 <pseudoDerivative+0x4e>
  {
	  reset = 1;
 8001540:	4b9a      	ldr	r3, [pc, #616]	; (80017ac <pseudoDerivative+0x2b4>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
  }

  if (reset == 1)
 8001546:	4b99      	ldr	r3, [pc, #612]	; (80017ac <pseudoDerivative+0x2b4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d115      	bne.n	800157a <pseudoDerivative+0x82>
  {
    for (i = 0; i < d; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
 8001552:	e007      	b.n	8001564 <pseudoDerivative+0x6c>
    {
      mybuffer[i] = 0;
 8001554:	4a96      	ldr	r2, [pc, #600]	; (80017b0 <pseudoDerivative+0x2b8>)
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	4413      	add	r3, r2
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < d; i++)
 800155e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001560:	3301      	adds	r3, #1
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
 8001564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf3      	blt.n	8001554 <pseudoDerivative+0x5c>
    }
    counter = 0;
 800156c:	4991      	ldr	r1, [pc, #580]	; (80017b4 <pseudoDerivative+0x2bc>)
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9c1 2300 	strd	r2, r3, [r1]
  }

  counter = counter + 1;
 800157a:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <pseudoDerivative+0x2bc>)
 800157c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <pseudoDerivative+0x2c0>)
 8001586:	f7fe fe51 	bl	800022c <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4989      	ldr	r1, [pc, #548]	; (80017b4 <pseudoDerivative+0x2bc>)
 8001590:	e9c1 2300 	strd	r2, r3, [r1]

  for (k = 0; k < d - 1; k++)
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	e00b      	b.n	80015b2 <pseudoDerivative+0xba>
  {
    mybuffer[k] = mybuffer[k + 1];
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	3301      	adds	r3, #1
 800159e:	4a84      	ldr	r2, [pc, #528]	; (80017b0 <pseudoDerivative+0x2b8>)
 80015a0:	5cd1      	ldrb	r1, [r2, r3]
 80015a2:	4a83      	ldr	r2, [pc, #524]	; (80017b0 <pseudoDerivative+0x2b8>)
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
  for (k = 0; k < d - 1; k++)
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	3301      	adds	r3, #1
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbee      	blt.n	800159a <pseudoDerivative+0xa2>
  }

  mybuffer[d] = e;
 80015bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c0:	f7ff faac 	bl	8000b1c <__aeabi_d2uiz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b2d9      	uxtb	r1, r3
 80015c8:	4a79      	ldr	r2, [pc, #484]	; (80017b0 <pseudoDerivative+0x2b8>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]

  if (counter >= d)
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ff76 	bl	80004c4 <__aeabi_i2d>
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <pseudoDerivative+0x2bc>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff fa57 	bl	8000a90 <__aeabi_dcmple>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 816d 	beq.w	80018c4 <pseudoDerivative+0x3cc>
  {
    if (mediana == 1)
 80015ea:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <pseudoDerivative+0x2b0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 80d0 	bne.w	8001794 <pseudoDerivative+0x29c>
    {
      uint8_t mybuffer1[10];
      for (i = 0; i < d; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
 80015f8:	e00c      	b.n	8001614 <pseudoDerivative+0x11c>
      {
        mybuffer1[i] = mybuffer[i];
 80015fa:	4a6d      	ldr	r2, [pc, #436]	; (80017b0 <pseudoDerivative+0x2b8>)
 80015fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fe:	4413      	add	r3, r2
 8001600:	7819      	ldrb	r1, [r3, #0]
 8001602:	f107 0210 	add.w	r2, r7, #16
 8001606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001608:	4413      	add	r3, r2
 800160a:	460a      	mov	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < d; i++)
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	3301      	adds	r3, #1
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbee      	blt.n	80015fa <pseudoDerivative+0x102>
      }

      int min = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
      int temp = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
      for (int i = 0; i < d - 1; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	e036      	b.n	8001698 <pseudoDerivative+0x1a0>
      {
        min = i;
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	627b      	str	r3, [r7, #36]	; 0x24

        for (j = i + 1; j < d; j++)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	3301      	adds	r3, #1
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
 8001634:	e029      	b.n	800168a <pseudoDerivative+0x192>
        {
          if (mybuffer1[j] < mybuffer1[min])
 8001636:	f107 0210 	add.w	r2, r7, #16
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	4413      	add	r3, r2
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	f107 0110 	add.w	r1, r7, #16
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	440b      	add	r3, r1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d201      	bcs.n	8001652 <pseudoDerivative+0x15a>
          {
            min = j;
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
          }
          temp = mybuffer1[min];
 8001652:	f107 0210 	add.w	r2, r7, #16
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	61fb      	str	r3, [r7, #28]
          mybuffer1[min] = mybuffer1[i];
 800165e:	f107 0210 	add.w	r2, r7, #16
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	4413      	add	r3, r2
 8001666:	7819      	ldrb	r1, [r3, #0]
 8001668:	f107 0210 	add.w	r2, r7, #16
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	4413      	add	r3, r2
 8001670:	460a      	mov	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
          mybuffer1[i] = temp;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	4413      	add	r3, r2
 8001680:	460a      	mov	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
        for (j = i + 1; j < d; j++)
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	3301      	adds	r3, #1
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
 800168a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd1      	blt.n	8001636 <pseudoDerivative+0x13e>
      for (int i = 0; i < d - 1; i++)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	3301      	adds	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbc3      	blt.n	800162a <pseudoDerivative+0x132>
        }
      }

      if (c % 2 != 0)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d028      	beq.n	80016fe <pseudoDerivative+0x206>
      {
        temp1 = mybuffer1[(c + 1) / 2];
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <pseudoDerivative+0x1be>
 80016b4:	3301      	adds	r3, #1
 80016b6:	105b      	asrs	r3, r3, #1
 80016b8:	3338      	adds	r3, #56	; 0x38
 80016ba:	443b      	add	r3, r7
 80016bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe feef 	bl	80004a4 <__aeabi_ui2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	493c      	ldr	r1, [pc, #240]	; (80017bc <pseudoDerivative+0x2c4>)
 80016cc:	e9c1 2300 	strd	r2, r3, [r1]
        temp2 = mybuffer1[d - c + (c + 1) / 2];
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da00      	bge.n	80016e0 <pseudoDerivative+0x1e8>
 80016de:	3301      	adds	r3, #1
 80016e0:	105b      	asrs	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	3338      	adds	r3, #56	; 0x38
 80016e6:	443b      	add	r3, r7
 80016e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fed9 	bl	80004a4 <__aeabi_ui2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4932      	ldr	r1, [pc, #200]	; (80017c0 <pseudoDerivative+0x2c8>)
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]
 80016fc:	e0c1      	b.n	8001882 <pseudoDerivative+0x38a>
      }
      else
      {
        temp1 = (mybuffer1[c / 2] + mybuffer1[(c + 1) / 2]) / 2;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <pseudoDerivative+0x20e>
 8001704:	3301      	adds	r3, #1
 8001706:	105b      	asrs	r3, r3, #1
 8001708:	3338      	adds	r3, #56	; 0x38
 800170a:	443b      	add	r3, r7
 800170c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001710:	461a      	mov	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	da00      	bge.n	800171c <pseudoDerivative+0x224>
 800171a:	3301      	adds	r3, #1
 800171c:	105b      	asrs	r3, r3, #1
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	443b      	add	r3, r7
 8001722:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001726:	4413      	add	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	da00      	bge.n	800172e <pseudoDerivative+0x236>
 800172c:	3301      	adds	r3, #1
 800172e:	105b      	asrs	r3, r3, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fec7 	bl	80004c4 <__aeabi_i2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4920      	ldr	r1, [pc, #128]	; (80017bc <pseudoDerivative+0x2c4>)
 800173c:	e9c1 2300 	strd	r2, r3, [r1]
        temp2 = (mybuffer1[d - c + c / 2] + mybuffer1[d - c + c / 2 + 1]) / 2;
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	1ad2      	subs	r2, r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da00      	bge.n	800174e <pseudoDerivative+0x256>
 800174c:	3301      	adds	r3, #1
 800174e:	105b      	asrs	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	3338      	adds	r3, #56	; 0x38
 8001754:	443b      	add	r3, r7
 8001756:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800175a:	4619      	mov	r1, r3
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	1ad2      	subs	r2, r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da00      	bge.n	800176a <pseudoDerivative+0x272>
 8001768:	3301      	adds	r3, #1
 800176a:	105b      	asrs	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	3301      	adds	r3, #1
 8001770:	3338      	adds	r3, #56	; 0x38
 8001772:	443b      	add	r3, r7
 8001774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001778:	440b      	add	r3, r1
 800177a:	2b00      	cmp	r3, #0
 800177c:	da00      	bge.n	8001780 <pseudoDerivative+0x288>
 800177e:	3301      	adds	r3, #1
 8001780:	105b      	asrs	r3, r3, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe9e 	bl	80004c4 <__aeabi_i2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <pseudoDerivative+0x2c8>)
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
 8001792:	e076      	b.n	8001882 <pseudoDerivative+0x38a>
      }
    }
    else
    {
      temp1 = 0;
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <pseudoDerivative+0x2c4>)
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < c; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
 80017a6:	e021      	b.n	80017ec <pseudoDerivative+0x2f4>
 80017a8:	2000048c 	.word	0x2000048c
 80017ac:	20000490 	.word	0x20000490
 80017b0:	200004b0 	.word	0x200004b0
 80017b4:	20000498 	.word	0x20000498
 80017b8:	3ff00000 	.word	0x3ff00000
 80017bc:	200004a0 	.word	0x200004a0
 80017c0:	200004a8 	.word	0x200004a8
      {
        temp1 = temp1 + mybuffer[i];
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <pseudoDerivative+0x3f4>)
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe79 	bl	80004c4 <__aeabi_i2d>
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <pseudoDerivative+0x3f8>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fd28 	bl	800022c <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4943      	ldr	r1, [pc, #268]	; (80018f0 <pseudoDerivative+0x3f8>)
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < c; i++)
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	3301      	adds	r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbe7      	blt.n	80017c4 <pseudoDerivative+0x2cc>
      }
      temp1 = temp1 / c;
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <pseudoDerivative+0x3f8>)
 80017f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f7fe fe62 	bl	80004c4 <__aeabi_i2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fff0 	bl	80007ec <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4937      	ldr	r1, [pc, #220]	; (80018f0 <pseudoDerivative+0x3f8>)
 8001812:	e9c1 2300 	strd	r2, r3, [r1]

      temp2 = 0;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <pseudoDerivative+0x3fc>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = d - c + 1; i < d; i++)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	3301      	adds	r3, #1
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
 800182e:	e013      	b.n	8001858 <pseudoDerivative+0x360>
      {
        temp2 = temp2 + mybuffer[i];
 8001830:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <pseudoDerivative+0x3f4>)
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe43 	bl	80004c4 <__aeabi_i2d>
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <pseudoDerivative+0x3fc>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fcf2 	bl	800022c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4929      	ldr	r1, [pc, #164]	; (80018f4 <pseudoDerivative+0x3fc>)
 800184e:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = d - c + 1; i < d; i++)
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	3301      	adds	r3, #1
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbe7      	blt.n	8001830 <pseudoDerivative+0x338>
      }
      temp2 = temp2 / c;
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <pseudoDerivative+0x3fc>)
 8001862:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f7fe fe2c 	bl	80004c4 <__aeabi_i2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe ffba 	bl	80007ec <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	491d      	ldr	r1, [pc, #116]	; (80018f4 <pseudoDerivative+0x3fc>)
 800187e:	e9c1 2300 	strd	r2, r3, [r1]
    }
    d_error = (temp2 - temp1) / (TS * (d - c));
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <pseudoDerivative+0x3fc>)
 8001884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <pseudoDerivative+0x3f8>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fccb 	bl	8000228 <__aeabi_dsub>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	461d      	mov	r5, r3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2232      	movs	r2, #50	; 0x32
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe0c 	bl	80004c4 <__aeabi_i2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe ff9a 	bl	80007ec <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <pseudoDerivative+0x400>)
 80018be:	e9c1 2300 	strd	r2, r3, [r1]
 80018c2:	e006      	b.n	80018d2 <pseudoDerivative+0x3da>
  }
  else
  {
    d_error = 0;
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <pseudoDerivative+0x400>)
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return d_error;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <pseudoDerivative+0x400>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80018dc:	eeb0 0a47 	vmov.f32	s0, s14
 80018e0:	eef0 0a67 	vmov.f32	s1, s15
 80018e4:	3738      	adds	r7, #56	; 0x38
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200004b0 	.word	0x200004b0
 80018f0:	200004a0 	.word	0x200004a0
 80018f4:	200004a8 	.word	0x200004a8
 80018f8:	200004c8 	.word	0x200004c8

080018fc <PID>:

double PID(unsigned int t, double e, double de, double Kp, double Ki, double Kd, double S_u, double S_du, double S_i, double PID_timeOn)
{
 80018fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001900:	b0af      	sub	sp, #188	; 0xbc
 8001902:	af00      	add	r7, sp, #0
 8001904:	6578      	str	r0, [r7, #84]	; 0x54
 8001906:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
 800190a:	ed87 1b10 	vstr	d1, [r7, #64]	; 0x40
 800190e:	ed87 2b0e 	vstr	d2, [r7, #56]	; 0x38
 8001912:	ed87 3b0c 	vstr	d3, [r7, #48]	; 0x30
 8001916:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 800191a:	ed87 5b08 	vstr	d5, [r7, #32]
 800191e:	ed87 6b06 	vstr	d6, [r7, #24]
 8001922:	ed87 7b04 	vstr	d7, [r7, #16]
  if (x_integral[0] == 0)
 8001926:	4ba1      	ldr	r3, [pc, #644]	; (8001bac <PID+0x2b0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <PID+0x4e>
  {
    x_integral[0] = 0;
 800192e:	4b9f      	ldr	r3, [pc, #636]	; (8001bac <PID+0x2b0>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    u_internal = Kp * e;
 8001934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001938:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800193c:	f7fe fe2c 	bl	8000598 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	499a      	ldr	r1, [pc, #616]	; (8001bb0 <PID+0x2b4>)
 8001946:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (t >= PID_timeOn)
 800194a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800194c:	f7fe fdaa 	bl	80004a4 <__aeabi_ui2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001958:	f7ff f89a 	bl	8000a90 <__aeabi_dcmple>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8175 	beq.w	8001c4e <PID+0x352>
  {
    u_noint =  Kp * e +  Kd * de;
 8001964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001968:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800196c:	f7fe fe14 	bl	8000598 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4690      	mov	r8, r2
 8001976:	4699      	mov	r9, r3
 8001978:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800197c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001980:	f7fe fe0a 	bl	8000598 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4640      	mov	r0, r8
 800198a:	4649      	mov	r1, r9
 800198c:	f7fe fc4e 	bl	800022c <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4987      	ldr	r1, [pc, #540]	; (8001bb4 <PID+0x2b8>)
 8001996:	e9c1 2300 	strd	r2, r3, [r1]
    d_integral =  Ki * e * TS;
 800199a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800199e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <PID+0x2bc>)
 80019b4:	f7fe fdf0 	bl	8000598 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	497f      	ldr	r1, [pc, #508]	; (8001bbc <PID+0x2c0>)
 80019be:	e9c1 2300 	strd	r2, r3, [r1]

    xhat_integral = x_integral[0] + d_integral;
 80019c2:	4b7a      	ldr	r3, [pc, #488]	; (8001bac <PID+0x2b0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd7c 	bl	80004c4 <__aeabi_i2d>
 80019cc:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <PID+0x2c0>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fc2b 	bl	800022c <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4979      	ldr	r1, [pc, #484]	; (8001bc0 <PID+0x2c4>)
 80019dc:	e9c1 2300 	strd	r2, r3, [r1]
    theta =  S_u - abs(u_noint + xhat_integral);
 80019e0:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <PID+0x2b8>)
 80019e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <PID+0x2c4>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fc1e 	bl	800022c <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f868 	bl	8000acc <__aeabi_d2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bfb8      	it	lt
 8001a02:	425b      	neglt	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd5d 	bl	80004c4 <__aeabi_i2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a12:	f7fe fc09 	bl	8000228 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	496a      	ldr	r1, [pc, #424]	; (8001bc4 <PID+0x2c8>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
    if (theta < 0)
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <PID+0x2c8>)
 8001a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f7ff f825 	bl	8000a7c <__aeabi_dcmplt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d034      	beq.n	8001aa2 <PID+0x1a6>
    {
      if ( abs(u_noint + xhat_integral) < abs(u_noint + x_integral[0]))
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <PID+0x2b8>)
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <PID+0x2c4>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fbf2 	bl	800022c <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f83c 	bl	8000acc <__aeabi_d2iz>
 8001a54:	4603      	mov	r3, r0
 8001a56:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8001a5a:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <PID+0x2b0>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd2e 	bl	80004c4 <__aeabi_i2d>
 8001a68:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <PID+0x2b8>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fbdd 	bl	800022c <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f827 	bl	8000acc <__aeabi_d2iz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bfb8      	it	lt
 8001a84:	425b      	neglt	r3, r3
 8001a86:	429e      	cmp	r6, r3
 8001a88:	da16      	bge.n	8001ab8 <PID+0x1bc>
      {
        x_integral[0] = xhat_integral;
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <PID+0x2c4>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f842 	bl	8000b1c <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <PID+0x2b0>)
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e00a      	b.n	8001ab8 <PID+0x1bc>
      }
    }
    else
    {
      x_integral[0] = xhat_integral;
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <PID+0x2c4>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f836 	bl	8000b1c <__aeabi_d2uiz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <PID+0x2b0>)
 8001ab6:	701a      	strb	r2, [r3, #0]
    }

    x_integral[0] = max(- S_i, min( S_i, x_integral[0]));
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ac8:	ed87 7b2c 	vstr	d7, [r7, #176]	; 0xb0
 8001acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ad0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <PID+0x2b0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001adc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fcef 	bl	80004c4 <__aeabi_i2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001aee:	f7fe ffc5 	bl	8000a7c <__aeabi_dcmplt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <PID+0x202>
 8001af8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001afc:	e006      	b.n	8001b0c <PID+0x210>
 8001afe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fcde 	bl	80004c4 <__aeabi_i2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8001b10:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b14:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001b18:	f7fe ffce 	bl	8000ab8 <__aeabi_dcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <PID+0x22c>
 8001b22:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001b26:	e001      	b.n	8001b2c <PID+0x230>
 8001b28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7fe fff4 	bl	8000b1c <__aeabi_d2uiz>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <PID+0x2b0>)
 8001b3a:	701a      	strb	r2, [r3, #0]

    u_tot = max(- S_u, min( S_u, u_noint + x_integral[0]));
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	ed97 7b00 	vldr	d7, [r7]
 8001b4c:	ed87 7b24 	vstr	d7, [r7, #144]	; 0x90
 8001b50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b54:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <PID+0x2b0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcb1 	bl	80004c4 <__aeabi_i2d>
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <PID+0x2b8>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fb60 	bl	800022c <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001b78:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001b7c:	f7fe ff7e 	bl	8000a7c <__aeabi_dcmplt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <PID+0x290>
 8001b86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b8a:	e001      	b.n	8001b90 <PID+0x294>
 8001b8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001b90:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8001b94:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001b98:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001b9c:	f7fe ff8c 	bl	8000ab8 <__aeabi_dcmpgt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <PID+0x2cc>
 8001ba6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001baa:	e00f      	b.n	8001bcc <PID+0x2d0>
 8001bac:	200004d8 	.word	0x200004d8
 8001bb0:	200004e0 	.word	0x200004e0
 8001bb4:	200004e8 	.word	0x200004e8
 8001bb8:	40490000 	.word	0x40490000
 8001bbc:	200004f0 	.word	0x200004f0
 8001bc0:	20000500 	.word	0x20000500
 8001bc4:	200004f8 	.word	0x200004f8
 8001bc8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001bcc:	492e      	ldr	r1, [pc, #184]	; (8001c88 <PID+0x38c>)
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]

    u_internal = u_internal + max(- S_du, min( S_du, u_tot - u_internal));
 8001bd2:	69bc      	ldr	r4, [r7, #24]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bda:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
 8001bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <PID+0x38c>)
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <PID+0x390>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fb19 	bl	8000228 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001bfe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c06:	f7fe ff39 	bl	8000a7c <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <PID+0x31a>
 8001c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c14:	e001      	b.n	8001c1a <PID+0x31e>
 8001c16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c22:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c26:	f7fe ff47 	bl	8000ab8 <__aeabi_dcmpgt>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <PID+0x33a>
 8001c30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c34:	e001      	b.n	8001c3a <PID+0x33e>
 8001c36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <PID+0x390>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe faf4 	bl	800022c <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4910      	ldr	r1, [pc, #64]	; (8001c8c <PID+0x390>)
 8001c4a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  u = u_internal;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <PID+0x390>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe ff60 	bl	8000b1c <__aeabi_d2uiz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <PID+0x394>)
 8001c62:	701a      	strb	r2, [r3, #0]

  return u;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <PID+0x394>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc1b 	bl	80004a4 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c76:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7a:	eef0 0a67 	vmov.f32	s1, s15
 8001c7e:	37bc      	adds	r7, #188	; 0xbc
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c86:	bf00      	nop
 8001c88:	20000508 	.word	0x20000508
 8001c8c:	200004e0 	.word	0x200004e0
 8001c90:	200004ba 	.word	0x200004ba

08001c94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f003 fd3d 	bl	800571c <osDelay>
 8001ca2:	e7fb      	b.n	8001c9c <StartDefaultTask+0x8>

08001ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cb6:	f000 fa67 	bl	8002188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	f06f 0001 	mvn.w	r0, #1
 8001d12:	f000 fb35 	bl	8002380 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_SPI_MspInit+0x9c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d137      	bne.n	8001db6 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_SPI_MspInit+0xa0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d76:	2310      	movs	r3, #16
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d82:	2301      	movs	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d86:	2305      	movs	r3, #5
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <HAL_SPI_MspInit+0xa4>)
 8001d92:	f000 fb1f 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d96:	23e0      	movs	r3, #224	; 0xe0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da6:	2305      	movs	r3, #5
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_SPI_MspInit+0xa4>)
 8001db2:	f000 fb0f 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40013000 	.word	0x40013000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0aa      	sub	sp, #168	; 0xa8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 f83c 	bl	8006e6a <memset>
  if(huart->Instance==USART3)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_UART_MspInit+0xb4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d13c      	bne.n	8001e76 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f9ae 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e16:	f7ff ff57 	bl	8001cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_UART_MspInit+0xb8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e64:	2307      	movs	r3, #7
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_UART_MspInit+0xbc>)
 8001e72:	f000 faaf 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	37a8      	adds	r7, #168	; 0xa8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40004800 	.word	0x40004800
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020c00 	.word	0x40020c00

08001e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_InitTick+0xd0>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_InitTick+0xd0>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_InitTick+0xd0>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb4:	f107 020c 	add.w	r2, r7, #12
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 f922 	bl	8003108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ec4:	f001 f90c 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_InitTick+0xd4>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_InitTick+0xd8>)
 8001ede:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <HAL_InitTick+0xdc>)
 8001ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_InitTick+0xd8>)
 8001ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_InitTick+0xd8>)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_InitTick+0xd8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_InitTick+0xd8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_InitTick+0xd8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <HAL_InitTick+0xd8>)
 8001f04:	f002 fbea 	bl	80046dc <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11b      	bne.n	8001f4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f16:	4813      	ldr	r0, [pc, #76]	; (8001f64 <HAL_InitTick+0xd8>)
 8001f18:	f002 fc42 	bl	80047a0 <HAL_TIM_Base_Start_IT>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d111      	bne.n	8001f4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f2a:	2019      	movs	r0, #25
 8001f2c:	f000 fa44 	bl	80023b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d808      	bhi.n	8001f48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f36:	2200      	movs	r2, #0
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	2019      	movs	r0, #25
 8001f3c:	f000 fa20 	bl	8002380 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_InitTick+0xe0>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e002      	b.n	8001f4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3730      	adds	r7, #48	; 0x30
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	20000518 	.word	0x20000518
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	2000004c 	.word	0x2000004c

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fa2:	f002 fc75 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000518 	.word	0x20000518

08001fb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
  }

  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fa45 	bl	8001494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf1      	blt.n	8001ffc <_write+0x12>
  }
  return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_close>:

int _close(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204a:	605a      	str	r2, [r3, #4]
  return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f004 fdb2 	bl	8006c24 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20040000 	.word	0x20040000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20000564 	.word	0x20000564
 80020f4:	200042c8 	.word	0x200042c8

080020f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002122:	490e      	ldr	r1, [pc, #56]	; (800215c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002138:	4c0b      	ldr	r4, [pc, #44]	; (8002168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002146:	f7ff ffd7 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f004 fe67 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7fe fea1 	bl	8000e94 <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002160:	080078c0 	.word	0x080078c0
  ldr r2, =_sbss
 8002164:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002168:	200042c8 	.word	0x200042c8

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>

0800216e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002172:	2003      	movs	r0, #3
 8002174:	f000 f8f9 	bl	800236a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002178:	200f      	movs	r0, #15
 800217a:	f7ff fe87 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217e:	f7ff fda9 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000050 	.word	0x20000050
 80021ac:	20000568 	.word	0x20000568

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000568 	.word	0x20000568

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000050 	.word	0x20000050

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <__NVIC_SetPriorityGrouping+0x40>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	4313      	orrs	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x40>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00
 8002254:	05fa0000 	.word	0x05fa0000

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff4c 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002392:	f7ff ff61 	bl	8002258 <__NVIC_GetPriorityGrouping>
 8002396:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f7ff ffb1 	bl	8002304 <NVIC_EncodePriority>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff80 	bl	80022b0 <__NVIC_SetPriority>
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff54 	bl	8002274 <__NVIC_EnableIRQ>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e169      	b.n	80026c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8158 	bne.w	80026c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x56>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b2 	beq.w	80026c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <HAL_GPIO_Init+0x30c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a5f      	ldr	r2, [pc, #380]	; (80026e0 <HAL_GPIO_Init+0x30c>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <HAL_GPIO_Init+0x30c>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002576:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <HAL_GPIO_Init+0x310>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_GPIO_Init+0x314>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02b      	beq.n	80025fa <HAL_GPIO_Init+0x226>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a51      	ldr	r2, [pc, #324]	; (80026ec <HAL_GPIO_Init+0x318>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d025      	beq.n	80025f6 <HAL_GPIO_Init+0x222>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <HAL_GPIO_Init+0x31c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <HAL_GPIO_Init+0x21e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4f      	ldr	r2, [pc, #316]	; (80026f4 <HAL_GPIO_Init+0x320>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d019      	beq.n	80025ee <HAL_GPIO_Init+0x21a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4e      	ldr	r2, [pc, #312]	; (80026f8 <HAL_GPIO_Init+0x324>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_GPIO_Init+0x216>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_GPIO_Init+0x328>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00d      	beq.n	80025e6 <HAL_GPIO_Init+0x212>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_GPIO_Init+0x32c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <HAL_GPIO_Init+0x20e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4b      	ldr	r2, [pc, #300]	; (8002704 <HAL_GPIO_Init+0x330>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_GPIO_Init+0x20a>
 80025da:	2307      	movs	r3, #7
 80025dc:	e00e      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025de:	2308      	movs	r3, #8
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x228>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x310>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_GPIO_Init+0x334>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a32      	ldr	r2, [pc, #200]	; (8002708 <HAL_GPIO_Init+0x334>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_GPIO_Init+0x334>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_GPIO_Init+0x334>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_GPIO_Init+0x334>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_GPIO_Init+0x334>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_GPIO_Init+0x334>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <HAL_GPIO_Init+0x334>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae92 	bls.w	80023f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43d9      	mvns	r1, r3
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	400b      	ands	r3, r1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e291      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8087 	beq.w	80028a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d00c      	beq.n	80027be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a4:	4b93      	ldr	r3, [pc, #588]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d112      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62>
 80027b0:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b8d      	ldr	r3, [pc, #564]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x130>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d168      	bne.n	80028a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e26b      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x7a>
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a83      	ldr	r2, [pc, #524]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e02e      	b.n	800284c <HAL_RCC_OscConfig+0xd8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x9c>
 80027f6:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7e      	ldr	r2, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7b      	ldr	r2, [pc, #492]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xd8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0xc0>
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xd8>
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6e      	ldr	r2, [pc, #440]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6b      	ldr	r2, [pc, #428]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7ff fcac 	bl	80021b0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fca8 	bl	80021b0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e21f      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xe8>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff fc98 	bl	80021b0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fc94 	bl	80021b0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e20b      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x110>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d069      	beq.n	8002986 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x190>
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x17a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1df      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	493d      	ldr	r1, [pc, #244]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e040      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a38      	ldr	r2, [pc, #224]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff fc4a 	bl	80021b0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7ff fc46 	bl	80021b0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1bd      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4929      	ldr	r1, [pc, #164]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
 8002952:	e018      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff fc26 	bl	80021b0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff fc22 	bl	80021b0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e199      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d038      	beq.n	8002a04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7ff fc03 	bl	80021b0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ae:	f7ff fbff 	bl	80021b0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e176      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x23a>
 80029cc:	e01a      	b.n	8002a04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_RCC_OscConfig+0x280>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7ff fbe9 	bl	80021b0 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff fbe5 	bl	80021b0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d903      	bls.n	80029f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e15c      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
 80029f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a4 	beq.w	8002b5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b85      	ldr	r3, [pc, #532]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a46:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7ff fbad 	bl	80021b0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7ff fba9 	bl	80021b0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	; 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e120      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x31a>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	e02d      	b.n	8002aea <HAL_RCC_OscConfig+0x376>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x33c>
 8002a96:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	e01c      	b.n	8002aea <HAL_RCC_OscConfig+0x376>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x35e>
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a5d      	ldr	r2, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x376>
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a5a      	ldr	r2, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7ff fb5d 	bl	80021b0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7ff fb59 	bl	80021b0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0ce      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCC_OscConfig+0x386>
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fb47 	bl	80021b0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7ff fb43 	bl	80021b0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a4 	beq.w	8002cac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d06b      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d149      	bne.n	8002c0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff fb14 	bl	80021b0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7ff fb10 	bl	80021b0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e087      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	041b      	lsls	r3, r3, #16
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bd6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff fae4 	bl	80021b0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7ff fae0 	bl	80021b0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e057      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x478>
 8002c0a:	e04f      	b.n	8002cac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff faca 	bl	80021b0 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7ff fac6 	bl	80021b0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e03d      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4ac>
 8002c3e:	e035      	b.n	8002cac <HAL_RCC_OscConfig+0x538>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x544>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d028      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d121      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d11a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d0      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	4965      	ldr	r1, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d040      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e073      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06b      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4936      	ldr	r1, [pc, #216]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7ff f9fe 	bl	80021b0 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7ff f9fa 	bl	80021b0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e053      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d210      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 020f 	bic.w	r2, r3, #15
 8002df6:	4922      	ldr	r1, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1cc>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1d0>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1d4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f80c 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08007834 	.word	0x08007834
 8002e8c:	20000048 	.word	0x20000048
 8002e90:	2000004c 	.word	0x2000004c

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e98:	b094      	sub	sp, #80	; 0x50
 8002e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	f200 80e1 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec6:	e0db      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ecc:	e0db      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed2:	e0d8      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0159      	lsls	r1, r3, #5
 8002f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f18:	0150      	lsls	r0, r2, #5
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4621      	mov	r1, r4
 8002f20:	1a51      	subs	r1, r2, r1
 8002f22:	6139      	str	r1, [r7, #16]
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f38:	4659      	mov	r1, fp
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f42:	4651      	mov	r1, sl
 8002f44:	018a      	lsls	r2, r1, #6
 8002f46:	4651      	mov	r1, sl
 8002f48:	ebb2 0801 	subs.w	r8, r2, r1
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	462b      	mov	r3, r5
 8002f74:	eb49 0303 	adc.w	r3, r9, r3
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f86:	4629      	mov	r1, r5
 8002f88:	024b      	lsls	r3, r1, #9
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f90:	4621      	mov	r1, r4
 8002f92:	024a      	lsls	r2, r1, #9
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa4:	f7fd fdda 	bl	8000b5c <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	e058      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	0159      	lsls	r1, r3, #5
 8002fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fde:	0150      	lsls	r0, r2, #5
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003004:	ebb2 040a 	subs.w	r4, r2, sl
 8003008:	eb63 050b 	sbc.w	r5, r3, fp
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	00eb      	lsls	r3, r5, #3
 8003016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	4614      	mov	r4, r2
 800301e:	461d      	mov	r5, r3
 8003020:	4643      	mov	r3, r8
 8003022:	18e3      	adds	r3, r4, r3
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	464b      	mov	r3, r9
 8003028:	eb45 0303 	adc.w	r3, r5, r3
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303a:	4629      	mov	r1, r5
 800303c:	028b      	lsls	r3, r1, #10
 800303e:	4621      	mov	r1, r4
 8003040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003044:	4621      	mov	r1, r4
 8003046:	028a      	lsls	r2, r1, #10
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	f7fd fd80 	bl	8000b5c <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003088:	4618      	mov	r0, r3
 800308a:	3750      	adds	r7, #80	; 0x50
 800308c:	46bd      	mov	sp, r7
 800308e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	00f42400 	.word	0x00f42400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000048 	.word	0x20000048

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030bc:	f7ff fff0 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08007844 	.word	0x08007844

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff ffdc 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08007844 	.word	0x08007844

08003108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	220f      	movs	r2, #15
 8003116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCC_GetClockConfig+0x60>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003190:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a64      	ldr	r2, [pc, #400]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003196:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4960      	ldr	r1, [pc, #384]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d017      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c2:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	4955      	ldr	r1, [pc, #340]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d017      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031fe:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	4946      	ldr	r1, [pc, #280]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 808b 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a39      	ldr	r2, [pc, #228]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe ffa6 	bl	80021b0 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe ffa2 	bl	80021b0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e2bc      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d035      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d02e      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d114      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe ff6a 	bl	80021b0 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fe ff66 	bl	80021b0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e27e      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330e:	d111      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800331e:	400b      	ands	r3, r1
 8003320:	4901      	ldr	r1, [pc, #4]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
 8003326:	e00b      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	0ffffcff 	.word	0x0ffffcff
 8003334:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4aa3      	ldr	r2, [pc, #652]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800333a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800333e:	6093      	str	r3, [r2, #8]
 8003340:	4ba1      	ldr	r3, [pc, #644]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	499e      	ldr	r1, [pc, #632]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800335e:	4b9a      	ldr	r3, [pc, #616]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	4a98      	ldr	r2, [pc, #608]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800336e:	4b96      	ldr	r3, [pc, #600]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003370:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4993      	ldr	r1, [pc, #588]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338c:	4b8e      	ldr	r3, [pc, #568]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	498b      	ldr	r1, [pc, #556]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ae:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	4982      	ldr	r1, [pc, #520]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d0:	4b7d      	ldr	r3, [pc, #500]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033de:	497a      	ldr	r1, [pc, #488]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f2:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	4971      	ldr	r1, [pc, #452]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003414:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f023 020c 	bic.w	r2, r3, #12
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4969      	ldr	r1, [pc, #420]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003436:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003458:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003466:	4958      	ldr	r1, [pc, #352]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800347a:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	494f      	ldr	r1, [pc, #316]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800349c:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	4947      	ldr	r1, [pc, #284]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	493e      	ldr	r1, [pc, #248]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4936      	ldr	r1, [pc, #216]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d011      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	492d      	ldr	r1, [pc, #180]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003540:	4921      	ldr	r1, [pc, #132]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003562:	4919      	ldr	r1, [pc, #100]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d006      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 809d 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe fe00 	bl	80021b0 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b2:	e00b      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b4:	f7fe fdfc 	bl	80021b0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d904      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e116      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035cc:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ed      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d113      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ec:	4b83      	ldr	r3, [pc, #524]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f2:	0e1b      	lsrs	r3, r3, #24
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	019a      	lsls	r2, r3, #6
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	071b      	lsls	r3, r3, #28
 800360c:	497b      	ldr	r1, [pc, #492]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d004      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d024      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363e:	d11f      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003640:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	0f1b      	lsrs	r3, r3, #28
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	019a      	lsls	r2, r3, #6
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	431a      	orrs	r2, r3
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	071b      	lsls	r3, r3, #28
 8003660:	4966      	ldr	r1, [pc, #408]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800366a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366e:	f023 021f 	bic.w	r2, r3, #31
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	3b01      	subs	r3, #1
 8003678:	4960      	ldr	r1, [pc, #384]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	019a      	lsls	r2, r3, #6
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	071b      	lsls	r3, r3, #28
 80036a0:	4956      	ldr	r1, [pc, #344]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036a8:	4b54      	ldr	r3, [pc, #336]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a53      	ldr	r2, [pc, #332]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe fd7c 	bl	80021b0 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036bc:	f7fe fd78 	bl	80021b0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e092      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ce:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 8088 	bne.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036e2:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a45      	ldr	r2, [pc, #276]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fe fd5f 	bl	80021b0 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036f6:	f7fe fd5b 	bl	80021b0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e075      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003708:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003714:	d0ef      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	2b00      	cmp	r3, #0
 800373c:	d120      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	4927      	ldr	r1, [pc, #156]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	3b01      	subs	r3, #1
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4920      	ldr	r1, [pc, #128]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x652>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003794:	d113      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	0e1b      	lsrs	r3, r3, #24
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	019a      	lsls	r2, r3, #6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	4911      	ldr	r1, [pc, #68]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ca:	f7fe fcf1 	bl	80021b0 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d2:	f7fe fced 	bl	80021b0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e007      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e09d      	b.n	800394e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d009      	beq.n	8003838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	e005      	b.n	8003838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fa66 	bl	8001d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003878:	d902      	bls.n	8003880 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e002      	b.n	8003886 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003884:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800388e:	d007      	beq.n	80038a0 <HAL_SPI_Init+0xa0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	ea42 0103 	orr.w	r1, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 0204 	and.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_SPI_Transmit+0x22>
 8003974:	2302      	movs	r3, #2
 8003976:	e158      	b.n	8003c2a <HAL_SPI_Transmit+0x2d4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003980:	f7fe fc16 	bl	80021b0 <HAL_GetTick>
 8003984:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d002      	beq.n	800399c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800399a:	e13d      	b.n	8003c18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Transmit+0x52>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ac:	e134      	b.n	8003c18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f8:	d10f      	bne.n	8003a1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d007      	beq.n	8003a38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a40:	d94b      	bls.n	8003ada <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_SPI_Transmit+0xfa>
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d13e      	bne.n	8003ace <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a74:	e02b      	b.n	8003ace <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d112      	bne.n	8003aaa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa8:	e011      	b.n	8003ace <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aaa:	f7fe fb81 	bl	80021b0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d803      	bhi.n	8003ac2 <HAL_SPI_Transmit+0x16c>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Transmit+0x172>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003acc:	e0a4      	b.n	8003c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ce      	bne.n	8003a76 <HAL_SPI_Transmit+0x120>
 8003ad8:	e07c      	b.n	8003bd4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_Transmit+0x192>
 8003ae2:	8afb      	ldrh	r3, [r7, #22]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d170      	bne.n	8003bca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d912      	bls.n	8003b18 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b02      	subs	r3, #2
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b16:	e058      	b.n	8003bca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b3e:	e044      	b.n	8003bca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d12b      	bne.n	8003ba6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d912      	bls.n	8003b7e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b02      	subs	r3, #2
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b7c:	e025      	b.n	8003bca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba4:	e011      	b.n	8003bca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba6:	f7fe fb03 	bl	80021b0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d803      	bhi.n	8003bbe <HAL_SPI_Transmit+0x268>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Transmit+0x26e>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc8:	e026      	b.n	8003c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1b5      	bne.n	8003b40 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fd15 	bl	8004608 <SPI_EndRxTxTransaction>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e000      	b.n	8003c18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af02      	add	r7, sp, #8
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4e:	d112      	bne.n	8003c76 <HAL_SPI_Receive+0x44>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10e      	bne.n	8003c76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4613      	mov	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f910 	bl	8003e92 <HAL_SPI_TransmitReceive>
 8003c72:	4603      	mov	r3, r0
 8003c74:	e109      	b.n	8003e8a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_SPI_Receive+0x52>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e102      	b.n	8003e8a <HAL_SPI_Receive+0x258>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8c:	f7fe fa90 	bl	80021b0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca2:	e0e9      	b.n	8003e78 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_SPI_Receive+0x7e>
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cb4:	e0e0      	b.n	8003e78 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d00:	d908      	bls.n	8003d14 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	e007      	b.n	8003d24 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2c:	d10f      	bne.n	8003d4e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d007      	beq.n	8003d6c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d74:	d867      	bhi.n	8003e46 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d76:	e030      	b.n	8003dda <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d117      	bne.n	8003db6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f103 020c 	add.w	r2, r3, #12
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003db4:	e011      	b.n	8003dda <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db6:	f7fe f9fb 	bl	80021b0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d803      	bhi.n	8003dce <HAL_SPI_Receive+0x19c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Receive+0x1a2>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dd8:	e04e      	b.n	8003e78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1c8      	bne.n	8003d78 <HAL_SPI_Receive+0x146>
 8003de6:	e034      	b.n	8003e52 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d115      	bne.n	8003e22 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	b292      	uxth	r2, r2
 8003e02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e20:	e011      	b.n	8003e46 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e22:	f7fe f9c5 	bl	80021b0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d803      	bhi.n	8003e3a <HAL_SPI_Receive+0x208>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Receive+0x20e>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e44:	e018      	b.n	8003e78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ca      	bne.n	8003de8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fb5a 	bl	8004510 <SPI_EndRxTransaction>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
 8003e74:	e000      	b.n	8003e78 <HAL_SPI_Receive+0x246>
  }

error :
 8003e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b08a      	sub	sp, #40	; 0x28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x26>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e1fb      	b.n	80042b0 <HAL_SPI_TransmitReceive+0x41e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec0:	f7fe f976 	bl	80021b0 <HAL_GetTick>
 8003ec4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ecc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003edc:	7efb      	ldrb	r3, [r7, #27]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d00e      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x6e>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee8:	d106      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x66>
 8003ef2:	7efb      	ldrb	r3, [r7, #27]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d003      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003efe:	e1cd      	b.n	800429c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_SPI_TransmitReceive+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_SPI_TransmitReceive+0x80>
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f18:	e1c0      	b.n	800429c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d003      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	887a      	ldrh	r2, [r7, #2]
 8003f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f70:	d802      	bhi.n	8003f78 <HAL_SPI_TransmitReceive+0xe6>
 8003f72:	8a3b      	ldrh	r3, [r7, #16]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d908      	bls.n	8003f8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	e007      	b.n	8003f9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d007      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc0:	d97c      	bls.n	80040bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x13e>
 8003fca:	8a7b      	ldrh	r3, [r7, #18]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d169      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff4:	e056      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11b      	bne.n	800403c <HAL_SPI_TransmitReceive+0x1aa>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_SPI_TransmitReceive+0x1aa>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2b01      	cmp	r3, #1
 8004012:	d113      	bne.n	800403c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d11c      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x1f2>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	b292      	uxth	r2, r2
 8004062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004084:	f7fe f894 	bl	80021b0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004090:	429a      	cmp	r2, r3
 8004092:	d807      	bhi.n	80040a4 <HAL_SPI_TransmitReceive+0x212>
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d003      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040a2:	e0fb      	b.n	800429c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1a3      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x164>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d19d      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x164>
 80040ba:	e0df      	b.n	800427c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x23a>
 80040c4:	8a7b      	ldrh	r3, [r7, #18]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 80cb 	bne.w	8004262 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d912      	bls.n	80040fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b02      	subs	r3, #2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040fa:	e0b2      	b.n	8004262 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	e09e      	b.n	8004262 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d134      	bne.n	800419c <HAL_SPI_TransmitReceive+0x30a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02f      	beq.n	800419c <HAL_SPI_TransmitReceive+0x30a>
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	2b01      	cmp	r3, #1
 8004140:	d12c      	bne.n	800419c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d912      	bls.n	8004172 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b02      	subs	r3, #2
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004170:	e012      	b.n	8004198 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d148      	bne.n	800423c <HAL_SPI_TransmitReceive+0x3aa>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d042      	beq.n	800423c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d923      	bls.n	800420a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	b292      	uxth	r2, r2
 80041ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b02      	subs	r3, #2
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d81f      	bhi.n	8004238 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	e016      	b.n	8004238 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f103 020c 	add.w	r2, r3, #12
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004238:	2301      	movs	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800423c:	f7fd ffb8 	bl	80021b0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004248:	429a      	cmp	r2, r3
 800424a:	d803      	bhi.n	8004254 <HAL_SPI_TransmitReceive+0x3c2>
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <HAL_SPI_TransmitReceive+0x3c8>
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004260:	e01c      	b.n	800429c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f af5b 	bne.w	8004124 <HAL_SPI_TransmitReceive+0x292>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f af54 	bne.w	8004124 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9c1 	bl	8004608 <SPI_EndRxTxTransaction>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d006      	beq.n	800429a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	661a      	str	r2, [r3, #96]	; 0x60
 8004298:	e000      	b.n	800429c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800429a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c6:	b2db      	uxtb	r3, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e4:	f7fd ff64 	bl	80021b0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f4:	f7fd ff5c 	bl	80021b0 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	e054      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d050      	beq.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004314:	f7fd ff4c 	bl	80021b0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d13d      	bne.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d111      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d004      	beq.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d107      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d10f      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e017      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d19b      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000048 	.word	0x20000048

080043e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043f6:	f7fd fedb 	bl	80021b0 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	4413      	add	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004406:	f7fd fed3 	bl	80021b0 <HAL_GetTick>
 800440a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004414:	4b3d      	ldr	r3, [pc, #244]	; (800450c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00da      	lsls	r2, r3, #3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	0d1b      	lsrs	r3, r3, #20
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800442c:	e060      	b.n	80044f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004434:	d107      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004444:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d050      	beq.n	80044f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444e:	f7fd feaf 	bl	80021b0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	429a      	cmp	r2, r3
 800445c:	d902      	bls.n	8004464 <SPI_WaitFifoStateUntilTimeout+0x80>
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d13d      	bne.n	80044e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447c:	d111      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d004      	beq.n	8004492 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d107      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044aa:	d10f      	bne.n	80044cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e010      	b.n	8004502 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d196      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3728      	adds	r7, #40	; 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000048 	.word	0x20000048

08004510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004524:	d111      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	d004      	beq.n	800453a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004538:	d107      	bne.n	800454a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d112      	bne.n	800457a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff feb8 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d021      	beq.n	80045ae <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03d      	b.n	80045f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <SPI_EndRxTransaction+0xf0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <SPI_EndRxTransaction+0xf4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	0d5b      	lsrs	r3, r3, #21
 8004586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3b01      	subs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d0f2      	beq.n	8004590 <SPI_EndRxTransaction+0x80>
 80045aa:	e000      	b.n	80045ae <SPI_EndRxTransaction+0x9e>
        break;
 80045ac:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d11d      	bne.n	80045f4 <SPI_EndRxTransaction+0xe4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d004      	beq.n	80045cc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d113      	bne.n	80045f4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff03 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e000      	b.n	80045f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000048 	.word	0x20000048
 8004604:	165e9f81 	.word	0x165e9f81

08004608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fedf 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e046      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <SPI_EndRxTxTransaction+0xcc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <SPI_EndRxTxTransaction+0xd0>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0d5b      	lsrs	r3, r3, #21
 8004648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d112      	bne.n	8004682 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fe34 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e023      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3b01      	subs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d0f2      	beq.n	8004682 <SPI_EndRxTxTransaction+0x7a>
 800469c:	e000      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
        break;
 800469e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fe99 	bl	80043e4 <SPI_WaitFifoStateUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e000      	b.n	80046ca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000048 	.word	0x20000048
 80046d8:	165e9f81 	.word	0x165e9f81

080046dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e049      	b.n	8004782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f841 	bl	800478a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 fa00 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e054      	b.n	8004862 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d01d      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_TIM_Base_Start_IT+0xd4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_TIM_Base_Start_IT+0xd8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_TIM_Base_Start_IT+0xdc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIM_Base_Start_IT+0xe0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_TIM_Base_Start_IT+0xe4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIM_Base_Start_IT+0xe8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d115      	bne.n	800484c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_TIM_Base_Start_IT+0xec>)
 8004828:	4013      	ands	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d015      	beq.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d011      	beq.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e008      	b.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e000      	b.n	8004860 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40010400 	.word	0x40010400
 8004884:	40014000 	.word	0x40014000
 8004888:	40001800 	.word	0x40001800
 800488c:	00010007 	.word	0x00010007

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0202 	mvn.w	r2, #2
 80048bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f905 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8f7 	bl	8004ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f908 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8db 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8cd 	bl	8004ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8de 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0208 	mvn.w	r2, #8
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8b1 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8a3 	bl	8004ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8b4 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f887 	bl	8004ae2 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f879 	bl	8004ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f88a 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0201 	mvn.w	r2, #1
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd f948 	bl	8001ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f91a 	bl	8004c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d10e      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f90d 	bl	8004c88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d10e      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f838 	bl	8004b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0220 	mvn.w	r2, #32
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8cd 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d00f      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a3d      	ldr	r2, [pc, #244]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a3c      	ldr	r2, [pc, #240]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3b      	ldr	r2, [pc, #236]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d027      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d023      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <TIM_Base_SetConfig+0x128>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <TIM_Base_SetConfig+0x12c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_Base_SetConfig+0xf8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d103      	bne.n	8004c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	615a      	str	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800
 8004c54:	40001800 	.word	0x40001800
 8004c58:	40001c00 	.word	0x40001c00
 8004c5c:	40002000 	.word	0x40002000

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e040      	b.n	8004d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd f884 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8b0 	bl	8004e40 <UART_SetConfig>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e022      	b.n	8004d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fb08 	bl	8005308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fb8f 	bl	800544c <UART_CheckIdleState>
 8004d2e:	4603      	mov	r3, r0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d171      	bne.n	8004e34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Transmit+0x24>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e06a      	b.n	8004e36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2221      	movs	r2, #33	; 0x21
 8004d6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6e:	f7fd fa1f 	bl	80021b0 <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	88fa      	ldrh	r2, [r7, #6]
 8004d78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	d108      	bne.n	8004da0 <HAL_UART_Transmit+0x68>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e003      	b.n	8004da8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004da8:	e02c      	b.n	8004e04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fb80 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e038      	b.n	8004e36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e007      	b.n	8004df2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1cc      	bne.n	8004daa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fb4d 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e005      	b.n	8004e36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4ba6      	ldr	r3, [pc, #664]	; (8005104 <UART_SetConfig+0x2c4>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a94      	ldr	r2, [pc, #592]	; (8005108 <UART_SetConfig+0x2c8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d120      	bne.n	8004efe <UART_SetConfig+0xbe>
 8004ebc:	4b93      	ldr	r3, [pc, #588]	; (800510c <UART_SetConfig+0x2cc>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d816      	bhi.n	8004ef8 <UART_SetConfig+0xb8>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x90>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004eed 	.word	0x08004eed
 8004ed8:	08004ee7 	.word	0x08004ee7
 8004edc:	08004ef3 	.word	0x08004ef3
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e150      	b.n	8005188 <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e14d      	b.n	8005188 <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e14a      	b.n	8005188 <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e147      	b.n	8005188 <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e144      	b.n	8005188 <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a83      	ldr	r2, [pc, #524]	; (8005110 <UART_SetConfig+0x2d0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d132      	bne.n	8004f6e <UART_SetConfig+0x12e>
 8004f08:	4b80      	ldr	r3, [pc, #512]	; (800510c <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d828      	bhi.n	8004f68 <UART_SetConfig+0x128>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0xdc>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f69 	.word	0x08004f69
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f57 	.word	0x08004f57
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	08004f63 	.word	0x08004f63
 8004f50:	2300      	movs	r3, #0
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e118      	b.n	8005188 <UART_SetConfig+0x348>
 8004f56:	2302      	movs	r3, #2
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e115      	b.n	8005188 <UART_SetConfig+0x348>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e112      	b.n	8005188 <UART_SetConfig+0x348>
 8004f62:	2308      	movs	r3, #8
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e10f      	b.n	8005188 <UART_SetConfig+0x348>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e10c      	b.n	8005188 <UART_SetConfig+0x348>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a68      	ldr	r2, [pc, #416]	; (8005114 <UART_SetConfig+0x2d4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d120      	bne.n	8004fba <UART_SetConfig+0x17a>
 8004f78:	4b64      	ldr	r3, [pc, #400]	; (800510c <UART_SetConfig+0x2cc>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f82:	2b30      	cmp	r3, #48	; 0x30
 8004f84:	d013      	beq.n	8004fae <UART_SetConfig+0x16e>
 8004f86:	2b30      	cmp	r3, #48	; 0x30
 8004f88:	d814      	bhi.n	8004fb4 <UART_SetConfig+0x174>
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d009      	beq.n	8004fa2 <UART_SetConfig+0x162>
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d810      	bhi.n	8004fb4 <UART_SetConfig+0x174>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <UART_SetConfig+0x15c>
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d006      	beq.n	8004fa8 <UART_SetConfig+0x168>
 8004f9a:	e00b      	b.n	8004fb4 <UART_SetConfig+0x174>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e0f2      	b.n	8005188 <UART_SetConfig+0x348>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e0ef      	b.n	8005188 <UART_SetConfig+0x348>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e0ec      	b.n	8005188 <UART_SetConfig+0x348>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e0e9      	b.n	8005188 <UART_SetConfig+0x348>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e0e6      	b.n	8005188 <UART_SetConfig+0x348>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a56      	ldr	r2, [pc, #344]	; (8005118 <UART_SetConfig+0x2d8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d120      	bne.n	8005006 <UART_SetConfig+0x1c6>
 8004fc4:	4b51      	ldr	r3, [pc, #324]	; (800510c <UART_SetConfig+0x2cc>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fce:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd0:	d013      	beq.n	8004ffa <UART_SetConfig+0x1ba>
 8004fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd4:	d814      	bhi.n	8005000 <UART_SetConfig+0x1c0>
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d009      	beq.n	8004fee <UART_SetConfig+0x1ae>
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d810      	bhi.n	8005000 <UART_SetConfig+0x1c0>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <UART_SetConfig+0x1a8>
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d006      	beq.n	8004ff4 <UART_SetConfig+0x1b4>
 8004fe6:	e00b      	b.n	8005000 <UART_SetConfig+0x1c0>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e0cc      	b.n	8005188 <UART_SetConfig+0x348>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e0c9      	b.n	8005188 <UART_SetConfig+0x348>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e0c6      	b.n	8005188 <UART_SetConfig+0x348>
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e0c3      	b.n	8005188 <UART_SetConfig+0x348>
 8005000:	2310      	movs	r3, #16
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e0c0      	b.n	8005188 <UART_SetConfig+0x348>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a44      	ldr	r2, [pc, #272]	; (800511c <UART_SetConfig+0x2dc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d125      	bne.n	800505c <UART_SetConfig+0x21c>
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <UART_SetConfig+0x2cc>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501e:	d017      	beq.n	8005050 <UART_SetConfig+0x210>
 8005020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005024:	d817      	bhi.n	8005056 <UART_SetConfig+0x216>
 8005026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502a:	d00b      	beq.n	8005044 <UART_SetConfig+0x204>
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d811      	bhi.n	8005056 <UART_SetConfig+0x216>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <UART_SetConfig+0x1fe>
 8005036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503a:	d006      	beq.n	800504a <UART_SetConfig+0x20a>
 800503c:	e00b      	b.n	8005056 <UART_SetConfig+0x216>
 800503e:	2300      	movs	r3, #0
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e0a1      	b.n	8005188 <UART_SetConfig+0x348>
 8005044:	2302      	movs	r3, #2
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e09e      	b.n	8005188 <UART_SetConfig+0x348>
 800504a:	2304      	movs	r3, #4
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e09b      	b.n	8005188 <UART_SetConfig+0x348>
 8005050:	2308      	movs	r3, #8
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e098      	b.n	8005188 <UART_SetConfig+0x348>
 8005056:	2310      	movs	r3, #16
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e095      	b.n	8005188 <UART_SetConfig+0x348>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <UART_SetConfig+0x2e0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d125      	bne.n	80050b2 <UART_SetConfig+0x272>
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <UART_SetConfig+0x2cc>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005074:	d017      	beq.n	80050a6 <UART_SetConfig+0x266>
 8005076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800507a:	d817      	bhi.n	80050ac <UART_SetConfig+0x26c>
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005080:	d00b      	beq.n	800509a <UART_SetConfig+0x25a>
 8005082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005086:	d811      	bhi.n	80050ac <UART_SetConfig+0x26c>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <UART_SetConfig+0x254>
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d006      	beq.n	80050a0 <UART_SetConfig+0x260>
 8005092:	e00b      	b.n	80050ac <UART_SetConfig+0x26c>
 8005094:	2301      	movs	r3, #1
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e076      	b.n	8005188 <UART_SetConfig+0x348>
 800509a:	2302      	movs	r3, #2
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e073      	b.n	8005188 <UART_SetConfig+0x348>
 80050a0:	2304      	movs	r3, #4
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e070      	b.n	8005188 <UART_SetConfig+0x348>
 80050a6:	2308      	movs	r3, #8
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e06d      	b.n	8005188 <UART_SetConfig+0x348>
 80050ac:	2310      	movs	r3, #16
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e06a      	b.n	8005188 <UART_SetConfig+0x348>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <UART_SetConfig+0x2e4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d138      	bne.n	800512e <UART_SetConfig+0x2ee>
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <UART_SetConfig+0x2cc>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050ca:	d017      	beq.n	80050fc <UART_SetConfig+0x2bc>
 80050cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050d0:	d82a      	bhi.n	8005128 <UART_SetConfig+0x2e8>
 80050d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d6:	d00b      	beq.n	80050f0 <UART_SetConfig+0x2b0>
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050dc:	d824      	bhi.n	8005128 <UART_SetConfig+0x2e8>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <UART_SetConfig+0x2aa>
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d006      	beq.n	80050f6 <UART_SetConfig+0x2b6>
 80050e8:	e01e      	b.n	8005128 <UART_SetConfig+0x2e8>
 80050ea:	2300      	movs	r3, #0
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e04b      	b.n	8005188 <UART_SetConfig+0x348>
 80050f0:	2302      	movs	r3, #2
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e048      	b.n	8005188 <UART_SetConfig+0x348>
 80050f6:	2304      	movs	r3, #4
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e045      	b.n	8005188 <UART_SetConfig+0x348>
 80050fc:	2308      	movs	r3, #8
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e042      	b.n	8005188 <UART_SetConfig+0x348>
 8005102:	bf00      	nop
 8005104:	efff69f3 	.word	0xefff69f3
 8005108:	40011000 	.word	0x40011000
 800510c:	40023800 	.word	0x40023800
 8005110:	40004400 	.word	0x40004400
 8005114:	40004800 	.word	0x40004800
 8005118:	40004c00 	.word	0x40004c00
 800511c:	40005000 	.word	0x40005000
 8005120:	40011400 	.word	0x40011400
 8005124:	40007800 	.word	0x40007800
 8005128:	2310      	movs	r3, #16
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e02c      	b.n	8005188 <UART_SetConfig+0x348>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a72      	ldr	r2, [pc, #456]	; (80052fc <UART_SetConfig+0x4bc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d125      	bne.n	8005184 <UART_SetConfig+0x344>
 8005138:	4b71      	ldr	r3, [pc, #452]	; (8005300 <UART_SetConfig+0x4c0>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005146:	d017      	beq.n	8005178 <UART_SetConfig+0x338>
 8005148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800514c:	d817      	bhi.n	800517e <UART_SetConfig+0x33e>
 800514e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005152:	d00b      	beq.n	800516c <UART_SetConfig+0x32c>
 8005154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005158:	d811      	bhi.n	800517e <UART_SetConfig+0x33e>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <UART_SetConfig+0x326>
 800515e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005162:	d006      	beq.n	8005172 <UART_SetConfig+0x332>
 8005164:	e00b      	b.n	800517e <UART_SetConfig+0x33e>
 8005166:	2300      	movs	r3, #0
 8005168:	77fb      	strb	r3, [r7, #31]
 800516a:	e00d      	b.n	8005188 <UART_SetConfig+0x348>
 800516c:	2302      	movs	r3, #2
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e00a      	b.n	8005188 <UART_SetConfig+0x348>
 8005172:	2304      	movs	r3, #4
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e007      	b.n	8005188 <UART_SetConfig+0x348>
 8005178:	2308      	movs	r3, #8
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e004      	b.n	8005188 <UART_SetConfig+0x348>
 800517e:	2310      	movs	r3, #16
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e001      	b.n	8005188 <UART_SetConfig+0x348>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d15b      	bne.n	800524a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d828      	bhi.n	80051ea <UART_SetConfig+0x3aa>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0x360>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051eb 	.word	0x080051eb
 80051b0:	080051db 	.word	0x080051db
 80051b4:	080051eb 	.word	0x080051eb
 80051b8:	080051eb 	.word	0x080051eb
 80051bc:	080051eb 	.word	0x080051eb
 80051c0:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7fd ff78 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 80051c8:	61b8      	str	r0, [r7, #24]
        break;
 80051ca:	e013      	b.n	80051f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7fd ff88 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 80051d0:	61b8      	str	r0, [r7, #24]
        break;
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <UART_SetConfig+0x4c4>)
 80051d6:	61bb      	str	r3, [r7, #24]
        break;
 80051d8:	e00c      	b.n	80051f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fd fe5b 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 80051de:	61b8      	str	r0, [r7, #24]
        break;
 80051e0:	e008      	b.n	80051f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	61bb      	str	r3, [r7, #24]
        break;
 80051e8:	e004      	b.n	80051f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	77bb      	strb	r3, [r7, #30]
        break;
 80051f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d074      	beq.n	80052e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	005a      	lsls	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	441a      	add	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	fbb2 f3f3 	udiv	r3, r2, r3
 800520e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b0f      	cmp	r3, #15
 8005214:	d916      	bls.n	8005244 <UART_SetConfig+0x404>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521c:	d212      	bcs.n	8005244 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f023 030f 	bic.w	r3, r3, #15
 8005226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	b29a      	uxth	r2, r3
 8005234:	89fb      	ldrh	r3, [r7, #14]
 8005236:	4313      	orrs	r3, r2
 8005238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	89fa      	ldrh	r2, [r7, #14]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e04f      	b.n	80052e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77bb      	strb	r3, [r7, #30]
 8005248:	e04c      	b.n	80052e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524a:	7ffb      	ldrb	r3, [r7, #31]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d828      	bhi.n	80052a2 <UART_SetConfig+0x462>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x418>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800528d 	.word	0x0800528d
 8005264:	080052a3 	.word	0x080052a3
 8005268:	08005293 	.word	0x08005293
 800526c:	080052a3 	.word	0x080052a3
 8005270:	080052a3 	.word	0x080052a3
 8005274:	080052a3 	.word	0x080052a3
 8005278:	0800529b 	.word	0x0800529b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fd ff1c 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8005280:	61b8      	str	r0, [r7, #24]
        break;
 8005282:	e013      	b.n	80052ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fd ff2c 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8005288:	61b8      	str	r0, [r7, #24]
        break;
 800528a:	e00f      	b.n	80052ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <UART_SetConfig+0x4c4>)
 800528e:	61bb      	str	r3, [r7, #24]
        break;
 8005290:	e00c      	b.n	80052ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fd fdff 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8005296:	61b8      	str	r0, [r7, #24]
        break;
 8005298:	e008      	b.n	80052ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	61bb      	str	r3, [r7, #24]
        break;
 80052a0:	e004      	b.n	80052ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	77bb      	strb	r3, [r7, #30]
        break;
 80052aa:	bf00      	nop
    }

    if (pclk != 0U)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	085a      	lsrs	r2, r3, #1
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	441a      	add	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b0f      	cmp	r3, #15
 80052ca:	d909      	bls.n	80052e0 <UART_SetConfig+0x4a0>
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d2:	d205      	bcs.n	80052e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	e001      	b.n	80052e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40007c00 	.word	0x40007c00
 8005300:	40023800 	.word	0x40023800
 8005304:	00f42400 	.word	0x00f42400

08005308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01a      	beq.n	800541e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005406:	d10a      	bne.n	800541e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800545c:	f7fc fea8 	bl	80021b0 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10e      	bne.n	800548e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f81b 	bl	80054ba <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e011      	b.n	80054b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b09c      	sub	sp, #112	; 0x70
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	4613      	mov	r3, r2
 80054c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ca:	e0a7      	b.n	800561c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	f000 80a3 	beq.w	800561c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fc fe6b 	bl	80021b0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <UART_WaitOnFlagUntilTimeout+0x32>
 80054e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d13f      	bne.n	800556c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005500:	667b      	str	r3, [r7, #100]	; 0x64
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e6      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	663b      	str	r3, [r7, #96]	; 0x60
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800553e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800554c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e068      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d050      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005588:	d148      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005592:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
 80055b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e6      	bne.n	8005594 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055e6:	623a      	str	r2, [r7, #32]
 80055e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	69f9      	ldr	r1, [r7, #28]
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e010      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	429a      	cmp	r2, r3
 8005638:	f43f af48 	beq.w	80054cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3770      	adds	r7, #112	; 0x70
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	4603      	mov	r3, r0
 800564e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005658:	2b84      	cmp	r3, #132	; 0x84
 800565a:	d005      	beq.n	8005668 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800565c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	3303      	adds	r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800567a:	f000 fb83 	bl	8005d84 <vTaskStartScheduler>
  
  return osOK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}

08005684 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005686:	b089      	sub	sp, #36	; 0x24
 8005688:	af04      	add	r7, sp, #16
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <osThreadCreate+0x54>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01c      	beq.n	80056d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685c      	ldr	r4, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681d      	ldr	r5, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691e      	ldr	r6, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ffc8 	bl	8005646 <makeFreeRtosPriority>
 80056b6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056c0:	9202      	str	r2, [sp, #8]
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	9100      	str	r1, [sp, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4632      	mov	r2, r6
 80056ca:	4629      	mov	r1, r5
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 f8ed 	bl	80058ac <xTaskCreateStatic>
 80056d2:	4603      	mov	r3, r0
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e01c      	b.n	8005712 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685c      	ldr	r4, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056e4:	b29e      	uxth	r6, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ffaa 	bl	8005646 <makeFreeRtosPriority>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	9200      	str	r2, [sp, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	4632      	mov	r2, r6
 8005700:	4629      	mov	r1, r5
 8005702:	4620      	mov	r0, r4
 8005704:	f000 f935 	bl	8005972 <xTaskCreate>
 8005708:	4603      	mov	r3, r0
 800570a:	2b01      	cmp	r3, #1
 800570c:	d001      	beq.n	8005712 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800571c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <osDelay+0x16>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	e000      	b.n	8005734 <osDelay+0x18>
 8005732:	2301      	movs	r3, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f000 faef 	bl	8005d18 <vTaskDelay>
  
  return osOK;
 800573a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f103 0208 	add.w	r2, r3, #8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f103 0208 	add.w	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f103 0208 	add.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d103      	bne.n	8005806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e00c      	b.n	8005820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3308      	adds	r3, #8
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e002      	b.n	8005814 <vListInsert+0x2e>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d2f6      	bcs.n	800580e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d103      	bne.n	800588c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08e      	sub	sp, #56	; 0x38
 80058b0:	af04      	add	r7, sp, #16
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10c      	bne.n	80058fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	61fb      	str	r3, [r7, #28]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058fa:	23b4      	movs	r3, #180	; 0xb4
 80058fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2bb4      	cmp	r3, #180	; 0xb4
 8005902:	d00c      	beq.n	800591e <xTaskCreateStatic+0x72>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	61bb      	str	r3, [r7, #24]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800591e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01e      	beq.n	8005964 <xTaskCreateStatic+0xb8>
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005934:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	2202      	movs	r2, #2
 800593a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800593e:	2300      	movs	r3, #0
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	f107 0314 	add.w	r3, r7, #20
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f850 	bl	80059fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800595c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800595e:	f000 f8ed 	bl	8005b3c <prvAddNewTaskToReadyList>
 8005962:	e001      	b.n	8005968 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005968:	697b      	ldr	r3, [r7, #20]
	}
 800596a:	4618      	mov	r0, r3
 800596c:	3728      	adds	r7, #40	; 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005972:	b580      	push	{r7, lr}
 8005974:	b08c      	sub	sp, #48	; 0x30
 8005976:	af04      	add	r7, sp, #16
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4618      	mov	r0, r3
 8005988:	f000 ff68 	bl	800685c <pvPortMalloc>
 800598c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005994:	20b4      	movs	r0, #180	; 0xb4
 8005996:	f000 ff61 	bl	800685c <pvPortMalloc>
 800599a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
 80059a8:	e005      	b.n	80059b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f001 f820 	bl	80069f0 <vPortFree>
 80059b0:	e001      	b.n	80059b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f80e 	bl	80059fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059e0:	69f8      	ldr	r0, [r7, #28]
 80059e2:	f000 f8ab 	bl	8005b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059e6:	2301      	movs	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e002      	b.n	80059f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059f2:	69bb      	ldr	r3, [r7, #24]
	}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005a14:	440b      	add	r3, r1
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	617b      	str	r3, [r7, #20]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01f      	beq.n	8005a8e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e012      	b.n	8005a7a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	3334      	adds	r3, #52	; 0x34
 8005a64:	460a      	mov	r2, r1
 8005a66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d006      	beq.n	8005a82 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b0f      	cmp	r3, #15
 8005a7e:	d9e9      	bls.n	8005a54 <prvInitialiseNewTask+0x58>
 8005a80:	e000      	b.n	8005a84 <prvInitialiseNewTask+0x88>
			{
				break;
 8005a82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a8c:	e003      	b.n	8005a96 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	2b06      	cmp	r3, #6
 8005a9a:	d901      	bls.n	8005aa0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	2200      	movs	r2, #0
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fe64 	bl	8005784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	3318      	adds	r3, #24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fe5f 	bl	8005784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	f1c3 0207 	rsb	r2, r3, #7
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	334c      	adds	r3, #76	; 0x4c
 8005af0:	2260      	movs	r2, #96	; 0x60
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f9b8 	bl	8006e6a <memset>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <prvInitialiseNewTask+0x134>)
 8005afe:	651a      	str	r2, [r3, #80]	; 0x50
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <prvInitialiseNewTask+0x138>)
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <prvInitialiseNewTask+0x13c>)
 8005b0a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	69b8      	ldr	r0, [r7, #24]
 8005b12:	f000 fcb1 	bl	8006478 <pxPortInitialiseStack>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b28:	bf00      	nop
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	0800786c 	.word	0x0800786c
 8005b34:	0800788c 	.word	0x0800788c
 8005b38:	0800784c 	.word	0x0800784c

08005b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b44:	f000 fda2 	bl	800668c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b48:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b52:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b5a:	4a27      	ldr	r2, [pc, #156]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <prvAddNewTaskToReadyList+0xb8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d110      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b68:	f000 fb5c 	bl	8006224 <prvInitialiseTaskLists>
 8005b6c:	e00d      	b.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b6e:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d802      	bhi.n	8005b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <prvAddNewTaskToReadyList+0xc4>)
 8005b92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <prvAddNewTaskToReadyList+0xc8>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <prvAddNewTaskToReadyList+0xcc>)
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7ff fdee 	bl	800579e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bc2:	f000 fd97 	bl	80066f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <prvAddNewTaskToReadyList+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddNewTaskToReadyList+0xbc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d207      	bcs.n	8005bec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvAddNewTaskToReadyList+0xd0>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000066c 	.word	0x2000066c
 8005bf8:	2000056c 	.word	0x2000056c
 8005bfc:	20000678 	.word	0x20000678
 8005c00:	20000688 	.word	0x20000688
 8005c04:	20000674 	.word	0x20000674
 8005c08:	20000570 	.word	0x20000570
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <vTaskDelayUntil+0x2e>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	b672      	cpsid	i
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	b662      	cpsie	i
 8005c38:	617b      	str	r3, [r7, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <vTaskDelayUntil+0x4e>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	b672      	cpsid	i
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	b662      	cpsie	i
 8005c58:	613b      	str	r3, [r7, #16]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <vTaskDelayUntil+0xfc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <vTaskDelayUntil+0x70>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	b672      	cpsid	i
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	b662      	cpsie	i
 8005c7a:	60fb      	str	r3, [r7, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8005c80:	f000 f8ee 	bl	8005e60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c84:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <vTaskDelayUntil+0x100>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d20b      	bcs.n	8005cb6 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d211      	bcs.n	8005ccc <vTaskDelayUntil+0xbc>
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d90d      	bls.n	8005ccc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb4:	e00a      	b.n	8005ccc <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d303      	bcc.n	8005cc8 <vTaskDelayUntil+0xb8>
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d901      	bls.n	8005ccc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fb63 	bl	80063ac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005ce6:	f000 f8c9 	bl	8005e7c <xTaskResumeAll>
 8005cea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d107      	bne.n	8005d02 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <vTaskDelayUntil+0x104>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d02:	bf00      	nop
 8005d04:	3728      	adds	r7, #40	; 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000694 	.word	0x20000694
 8005d10:	20000670 	.word	0x20000670
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d019      	beq.n	8005d5e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <vTaskDelay+0x64>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <vTaskDelay+0x34>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	b672      	cpsid	i
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	b662      	cpsie	i
 8005d46:	60bb      	str	r3, [r7, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005d4c:	f000 f888 	bl	8005e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d50:	2100      	movs	r1, #0
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fb2a 	bl	80063ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d58:	f000 f890 	bl	8005e7c <xTaskResumeAll>
 8005d5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <vTaskDelay+0x68>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000694 	.word	0x20000694
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d92:	463a      	mov	r2, r7
 8005d94:	1d39      	adds	r1, r7, #4
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb f860 	bl	8000e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	9202      	str	r2, [sp, #8]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2300      	movs	r3, #0
 8005db0:	460a      	mov	r2, r1
 8005db2:	4923      	ldr	r1, [pc, #140]	; (8005e40 <vTaskStartScheduler+0xbc>)
 8005db4:	4823      	ldr	r0, [pc, #140]	; (8005e44 <vTaskStartScheduler+0xc0>)
 8005db6:	f7ff fd79 	bl	80058ac <xTaskCreateStatic>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <vTaskStartScheduler+0xc4>)
 8005dbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <vTaskStartScheduler+0xc4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e001      	b.n	8005dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d11d      	bne.n	8005e14 <vTaskStartScheduler+0x90>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	b672      	cpsid	i
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	b662      	cpsie	i
 8005dec:	613b      	str	r3, [r7, #16]
}
 8005dee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <vTaskStartScheduler+0xc8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	334c      	adds	r3, #76	; 0x4c
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <vTaskStartScheduler+0xcc>)
 8005df8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dfa:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <vTaskStartScheduler+0xd0>)
 8005dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <vTaskStartScheduler+0xd4>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e08:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <vTaskStartScheduler+0xd8>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e0e:	f000 fbbf 	bl	8006590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e12:	e010      	b.n	8005e36 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d10c      	bne.n	8005e36 <vTaskStartScheduler+0xb2>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	b672      	cpsid	i
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	b662      	cpsie	i
 8005e30:	60fb      	str	r3, [r7, #12]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <vTaskStartScheduler+0xb0>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	0800782c 	.word	0x0800782c
 8005e44:	080061f5 	.word	0x080061f5
 8005e48:	20000690 	.word	0x20000690
 8005e4c:	2000056c 	.word	0x2000056c
 8005e50:	20000058 	.word	0x20000058
 8005e54:	2000068c 	.word	0x2000068c
 8005e58:	20000678 	.word	0x20000678
 8005e5c:	20000670 	.word	0x20000670

08005e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <vTaskSuspendAll+0x18>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a03      	ldr	r2, [pc, #12]	; (8005e78 <vTaskSuspendAll+0x18>)
 8005e6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20000694 	.word	0x20000694

08005e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e8a:	4b42      	ldr	r3, [pc, #264]	; (8005f94 <xTaskResumeAll+0x118>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10c      	bne.n	8005eac <xTaskResumeAll+0x30>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	b672      	cpsid	i
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	b662      	cpsie	i
 8005ea6:	603b      	str	r3, [r7, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eac:	f000 fbee 	bl	800668c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005eb0:	4b38      	ldr	r3, [pc, #224]	; (8005f94 <xTaskResumeAll+0x118>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <xTaskResumeAll+0x118>)
 8005eb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eba:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <xTaskResumeAll+0x118>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d161      	bne.n	8005f86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ec2:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <xTaskResumeAll+0x11c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d05d      	beq.n	8005f86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eca:	e02e      	b.n	8005f2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ecc:	4b33      	ldr	r3, [pc, #204]	; (8005f9c <xTaskResumeAll+0x120>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3318      	adds	r3, #24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fcbd 	bl	8005858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fcb8 	bl	8005858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <xTaskResumeAll+0x124>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <xTaskResumeAll+0x124>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4a27      	ldr	r2, [pc, #156]	; (8005fa4 <xTaskResumeAll+0x128>)
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7ff fc44 	bl	800579e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <xTaskResumeAll+0x12c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f24:	4b21      	ldr	r3, [pc, #132]	; (8005fac <xTaskResumeAll+0x130>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <xTaskResumeAll+0x120>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1cc      	bne.n	8005ecc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f38:	f000 fa18 	bl	800636c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <xTaskResumeAll+0x134>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d010      	beq.n	8005f6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f48:	f000 f836 	bl	8005fb8 <xTaskIncrementTick>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <xTaskResumeAll+0x130>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f1      	bne.n	8005f48 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005f64:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <xTaskResumeAll+0x134>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <xTaskResumeAll+0x130>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <xTaskResumeAll+0x138>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f86:	f000 fbb5 	bl	80066f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000694 	.word	0x20000694
 8005f98:	2000066c 	.word	0x2000066c
 8005f9c:	2000062c 	.word	0x2000062c
 8005fa0:	20000674 	.word	0x20000674
 8005fa4:	20000570 	.word	0x20000570
 8005fa8:	2000056c 	.word	0x2000056c
 8005fac:	20000680 	.word	0x20000680
 8005fb0:	2000067c 	.word	0x2000067c
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	; (8006100 <xTaskIncrementTick+0x148>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 808a 	bne.w	80060e0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	; (8006104 <xTaskIncrementTick+0x14c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fd4:	4a4b      	ldr	r2, [pc, #300]	; (8006104 <xTaskIncrementTick+0x14c>)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d122      	bne.n	8006026 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <xTaskIncrementTick+0x150>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	b672      	cpsid	i
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	b662      	cpsie	i
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xTaskIncrementTick+0x4a>
 8006004:	4b40      	ldr	r3, [pc, #256]	; (8006108 <xTaskIncrementTick+0x150>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <xTaskIncrementTick+0x154>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3e      	ldr	r2, [pc, #248]	; (8006108 <xTaskIncrementTick+0x150>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4a3e      	ldr	r2, [pc, #248]	; (800610c <xTaskIncrementTick+0x154>)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <xTaskIncrementTick+0x158>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <xTaskIncrementTick+0x158>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	f000 f9a3 	bl	800636c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006026:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <xTaskIncrementTick+0x15c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d348      	bcc.n	80060c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006030:	4b35      	ldr	r3, [pc, #212]	; (8006108 <xTaskIncrementTick+0x150>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603a:	4b36      	ldr	r3, [pc, #216]	; (8006114 <xTaskIncrementTick+0x15c>)
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	601a      	str	r2, [r3, #0]
					break;
 8006042:	e03e      	b.n	80060c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006044:	4b30      	ldr	r3, [pc, #192]	; (8006108 <xTaskIncrementTick+0x150>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d203      	bcs.n	8006064 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <xTaskIncrementTick+0x15c>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006062:	e02e      	b.n	80060c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fbf5 	bl	8005858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3318      	adds	r3, #24
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fbec 	bl	8005858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	2201      	movs	r2, #1
 8006086:	409a      	lsls	r2, r3
 8006088:	4b23      	ldr	r3, [pc, #140]	; (8006118 <xTaskIncrementTick+0x160>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	4a22      	ldr	r2, [pc, #136]	; (8006118 <xTaskIncrementTick+0x160>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a1f      	ldr	r2, [pc, #124]	; (800611c <xTaskIncrementTick+0x164>)
 80060a0:	441a      	add	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7ff fb78 	bl	800579e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <xTaskIncrementTick+0x168>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3b9      	bcc.n	8006030 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c0:	e7b6      	b.n	8006030 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xTaskIncrementTick+0x168>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c8:	4914      	ldr	r1, [pc, #80]	; (800611c <xTaskIncrementTick+0x164>)
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d907      	bls.n	80060ea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e004      	b.n	80060ea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <xTaskIncrementTick+0x16c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	4a0f      	ldr	r2, [pc, #60]	; (8006124 <xTaskIncrementTick+0x16c>)
 80060e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <xTaskIncrementTick+0x170>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000694 	.word	0x20000694
 8006104:	20000670 	.word	0x20000670
 8006108:	20000624 	.word	0x20000624
 800610c:	20000628 	.word	0x20000628
 8006110:	20000684 	.word	0x20000684
 8006114:	2000068c 	.word	0x2000068c
 8006118:	20000674 	.word	0x20000674
 800611c:	20000570 	.word	0x20000570
 8006120:	2000056c 	.word	0x2000056c
 8006124:	2000067c 	.word	0x2000067c
 8006128:	20000680 	.word	0x20000680

0800612c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <vTaskSwitchContext+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <vTaskSwitchContext+0xb4>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006140:	e046      	b.n	80061d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006142:	4b27      	ldr	r3, [pc, #156]	; (80061e0 <vTaskSwitchContext+0xb4>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	4b26      	ldr	r3, [pc, #152]	; (80061e4 <vTaskSwitchContext+0xb8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	f1c3 031f 	rsb	r3, r3, #31
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	4922      	ldr	r1, [pc, #136]	; (80061e8 <vTaskSwitchContext+0xbc>)
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <vTaskSwitchContext+0x60>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	b672      	cpsid	i
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	b662      	cpsie	i
 8006186:	607b      	str	r3, [r7, #4]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <vTaskSwitchContext+0x5e>
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <vTaskSwitchContext+0xbc>)
 8006198:	4413      	add	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3308      	adds	r3, #8
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d104      	bne.n	80061bc <vTaskSwitchContext+0x90>
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <vTaskSwitchContext+0xc0>)
 80061c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <vTaskSwitchContext+0xc0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	334c      	adds	r3, #76	; 0x4c
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <vTaskSwitchContext+0xc4>)
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000694 	.word	0x20000694
 80061e0:	20000680 	.word	0x20000680
 80061e4:	20000674 	.word	0x20000674
 80061e8:	20000570 	.word	0x20000570
 80061ec:	2000056c 	.word	0x2000056c
 80061f0:	20000058 	.word	0x20000058

080061f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061fc:	f000 f852 	bl	80062a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <prvIdleTask+0x28>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d9f9      	bls.n	80061fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <prvIdleTask+0x2c>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006218:	e7f0      	b.n	80061fc <prvIdleTask+0x8>
 800621a:	bf00      	nop
 800621c:	20000570 	.word	0x20000570
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800622a:	2300      	movs	r3, #0
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	e00c      	b.n	800624a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <prvInitialiseTaskLists+0x60>)
 800623c:	4413      	add	r3, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fa80 	bl	8005744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3301      	adds	r3, #1
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b06      	cmp	r3, #6
 800624e:	d9ef      	bls.n	8006230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006250:	480d      	ldr	r0, [pc, #52]	; (8006288 <prvInitialiseTaskLists+0x64>)
 8006252:	f7ff fa77 	bl	8005744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006256:	480d      	ldr	r0, [pc, #52]	; (800628c <prvInitialiseTaskLists+0x68>)
 8006258:	f7ff fa74 	bl	8005744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800625c:	480c      	ldr	r0, [pc, #48]	; (8006290 <prvInitialiseTaskLists+0x6c>)
 800625e:	f7ff fa71 	bl	8005744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006262:	480c      	ldr	r0, [pc, #48]	; (8006294 <prvInitialiseTaskLists+0x70>)
 8006264:	f7ff fa6e 	bl	8005744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006268:	480b      	ldr	r0, [pc, #44]	; (8006298 <prvInitialiseTaskLists+0x74>)
 800626a:	f7ff fa6b 	bl	8005744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <prvInitialiseTaskLists+0x78>)
 8006270:	4a05      	ldr	r2, [pc, #20]	; (8006288 <prvInitialiseTaskLists+0x64>)
 8006272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <prvInitialiseTaskLists+0x7c>)
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <prvInitialiseTaskLists+0x68>)
 8006278:	601a      	str	r2, [r3, #0]
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000570 	.word	0x20000570
 8006288:	200005fc 	.word	0x200005fc
 800628c:	20000610 	.word	0x20000610
 8006290:	2000062c 	.word	0x2000062c
 8006294:	20000640 	.word	0x20000640
 8006298:	20000658 	.word	0x20000658
 800629c:	20000624 	.word	0x20000624
 80062a0:	20000628 	.word	0x20000628

080062a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062aa:	e019      	b.n	80062e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062ac:	f000 f9ee 	bl	800668c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <prvCheckTasksWaitingTermination+0x50>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff facb 	bl	8005858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <prvCheckTasksWaitingTermination+0x54>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <prvCheckTasksWaitingTermination+0x54>)
 80062ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <prvCheckTasksWaitingTermination+0x58>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <prvCheckTasksWaitingTermination+0x58>)
 80062d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062d6:	f000 fa0d 	bl	80066f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f810 	bl	8006300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e0:	4b06      	ldr	r3, [pc, #24]	; (80062fc <prvCheckTasksWaitingTermination+0x58>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e1      	bne.n	80062ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000640 	.word	0x20000640
 80062f8:	2000066c 	.word	0x2000066c
 80062fc:	20000654 	.word	0x20000654

08006300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	334c      	adds	r3, #76	; 0x4c
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fecd 	bl	80070ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d108      	bne.n	800632e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb65 	bl	80069f0 <vPortFree>
				vPortFree( pxTCB );
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fb62 	bl	80069f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800632c:	e01a      	b.n	8006364 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d103      	bne.n	8006340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb59 	bl	80069f0 <vPortFree>
	}
 800633e:	e011      	b.n	8006364 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006346:	2b02      	cmp	r3, #2
 8006348:	d00c      	beq.n	8006364 <prvDeleteTCB+0x64>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <prvDeleteTCB+0x62>
	}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <prvResetNextTaskUnblockTime+0x38>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvResetNextTaskUnblockTime+0x3c>)
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006384:	e008      	b.n	8006398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvResetNextTaskUnblockTime+0x38>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a04      	ldr	r2, [pc, #16]	; (80063a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000624 	.word	0x20000624
 80063a8:	2000068c 	.word	0x2000068c

080063ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <prvAddCurrentTaskToDelayedList+0xb0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063bc:	4b28      	ldr	r3, [pc, #160]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fa48 	bl	8005858 <uxListRemove>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	2201      	movs	r2, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	4b21      	ldr	r3, [pc, #132]	; (8006464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4013      	ands	r3, r2
 80063e2:	4a20      	ldr	r2, [pc, #128]	; (8006464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d10a      	bne.n	8006404 <prvAddCurrentTaskToDelayedList+0x58>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	481a      	ldr	r0, [pc, #104]	; (8006468 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063fe:	f7ff f9ce 	bl	800579e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006402:	e026      	b.n	8006452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4413      	add	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	429a      	cmp	r2, r3
 800641a:	d209      	bcs.n	8006430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641c:	4b13      	ldr	r3, [pc, #76]	; (800646c <prvAddCurrentTaskToDelayedList+0xc0>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3304      	adds	r3, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f7ff f9dc 	bl	80057e6 <vListInsert>
}
 800642e:	e010      	b.n	8006452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7ff f9d2 	bl	80057e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d202      	bcs.n	8006452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6013      	str	r3, [r2, #0]
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000670 	.word	0x20000670
 8006460:	2000056c 	.word	0x2000056c
 8006464:	20000674 	.word	0x20000674
 8006468:	20000658 	.word	0x20000658
 800646c:	20000628 	.word	0x20000628
 8006470:	20000624 	.word	0x20000624
 8006474:	2000068c 	.word	0x2000068c

08006478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b04      	subs	r3, #4
 8006488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b04      	subs	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f023 0201 	bic.w	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064a8:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <pxPortInitialiseStack+0x64>)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3b14      	subs	r3, #20
 80064b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3b04      	subs	r3, #4
 80064be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f06f 0202 	mvn.w	r2, #2
 80064c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3b20      	subs	r3, #32
 80064cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	080064e1 	.word	0x080064e1

080064e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <prvTaskExitError+0x5c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d00c      	beq.n	800650e <prvTaskExitError+0x2e>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <prvTaskExitError+0x2c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	b672      	cpsid	i
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	b662      	cpsie	i
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006526:	bf00      	nop
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0fc      	beq.n	8006528 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000054 	.word	0x20000054

08006540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <pxCurrentTCBConst2>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f380 8809 	msr	PSP, r0
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8811 	msr	BASEPRI, r0
 800655a:	4770      	bx	lr
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst2>:
 8006560:	2000056c 	.word	0x2000056c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006568:	4808      	ldr	r0, [pc, #32]	; (800658c <prvPortStartFirstTask+0x24>)
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f380 8808 	msr	MSP, r0
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8814 	msr	CONTROL, r0
 800657a:	b662      	cpsie	i
 800657c:	b661      	cpsie	f
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	df00      	svc	0
 8006588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800658a:	bf00      	nop
 800658c:	e000ed08 	.word	0xe000ed08

08006590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <xPortStartScheduler+0xe4>)
 8006598:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <xPortStartScheduler+0xe8>)
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <xPortStartScheduler+0xec>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c4:	e009      	b.n	80065da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80065c6:	4b2d      	ldr	r3, [pc, #180]	; (800667c <xPortStartScheduler+0xec>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a2b      	ldr	r2, [pc, #172]	; (800667c <xPortStartScheduler+0xec>)
 80065ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d0ef      	beq.n	80065c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065e6:	4b25      	ldr	r3, [pc, #148]	; (800667c <xPortStartScheduler+0xec>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1c3 0307 	rsb	r3, r3, #7
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d00c      	beq.n	800660c <xPortStartScheduler+0x7c>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	b672      	cpsid	i
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	b662      	cpsie	i
 8006606:	60bb      	str	r3, [r7, #8]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <xPortStartScheduler+0xec>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	4a1a      	ldr	r2, [pc, #104]	; (800667c <xPortStartScheduler+0xec>)
 8006614:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006616:	4b19      	ldr	r3, [pc, #100]	; (800667c <xPortStartScheduler+0xec>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661e:	4a17      	ldr	r2, [pc, #92]	; (800667c <xPortStartScheduler+0xec>)
 8006620:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <xPortStartScheduler+0xf0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a14      	ldr	r2, [pc, #80]	; (8006680 <xPortStartScheduler+0xf0>)
 8006630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006634:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <xPortStartScheduler+0xf0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a11      	ldr	r2, [pc, #68]	; (8006680 <xPortStartScheduler+0xf0>)
 800663c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006640:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006642:	f000 f8dd 	bl	8006800 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <xPortStartScheduler+0xf4>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800664c:	f000 f8fc 	bl	8006848 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <xPortStartScheduler+0xf8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <xPortStartScheduler+0xf8>)
 8006656:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800665a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800665c:	f7ff ff84 	bl	8006568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006660:	f7ff fd64 	bl	800612c <vTaskSwitchContext>
	prvTaskExitError();
 8006664:	f7ff ff3c 	bl	80064e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	e000e400 	.word	0xe000e400
 8006678:	20000698 	.word	0x20000698
 800667c:	2000069c 	.word	0x2000069c
 8006680:	e000ed20 	.word	0xe000ed20
 8006684:	20000054 	.word	0x20000054
 8006688:	e000ef34 	.word	0xe000ef34

0800668c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	b672      	cpsid	i
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	b662      	cpsie	i
 80066a6:	607b      	str	r3, [r7, #4]
}
 80066a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066aa:	4b10      	ldr	r3, [pc, #64]	; (80066ec <vPortEnterCritical+0x60>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	4a0e      	ldr	r2, [pc, #56]	; (80066ec <vPortEnterCritical+0x60>)
 80066b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <vPortEnterCritical+0x60>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d111      	bne.n	80066e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <vPortEnterCritical+0x64>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <vPortEnterCritical+0x54>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	603b      	str	r3, [r7, #0]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vPortEnterCritical+0x52>
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20000054 	.word	0x20000054
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <vPortExitCritical+0x54>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <vPortExitCritical+0x28>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	b672      	cpsid	i
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	b662      	cpsie	i
 8006716:	607b      	str	r3, [r7, #4]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <vPortExitCritical+0x54>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3b01      	subs	r3, #1
 8006722:	4a09      	ldr	r2, [pc, #36]	; (8006748 <vPortExitCritical+0x54>)
 8006724:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <vPortExitCritical+0x54>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <vPortExitCritical+0x46>
 800672e:	2300      	movs	r3, #0
 8006730:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006738:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000054 	.word	0x20000054
 800674c:	00000000 	.word	0x00000000

08006750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006774:	b672      	cpsid	i
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	b662      	cpsie	i
 8006784:	f7ff fcd2 	bl	800612c <vTaskSwitchContext>
 8006788:	f04f 0000 	mov.w	r0, #0
 800678c:	f380 8811 	msr	BASEPRI, r0
 8006790:	bc09      	pop	{r0, r3}
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	f01e 0f10 	tst.w	lr, #16
 800679e:	bf08      	it	eq
 80067a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a4:	f380 8809 	msr	PSP, r0
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <pxCurrentTCBConst>:
 80067b0:	2000056c 	.word	0x2000056c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	b672      	cpsid	i
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	b662      	cpsie	i
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d6:	f7ff fbef 	bl	8005fb8 <xTaskIncrementTick>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <SysTick_Handler+0x44>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f383 8811 	msr	BASEPRI, r3
}
 80067f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <vPortSetupTimerInterrupt+0x34>)
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <vPortSetupTimerInterrupt+0x38>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <vPortSetupTimerInterrupt+0x3c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <vPortSetupTimerInterrupt+0x40>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	099b      	lsrs	r3, r3, #6
 800681c:	4a09      	ldr	r2, [pc, #36]	; (8006844 <vPortSetupTimerInterrupt+0x44>)
 800681e:	3b01      	subs	r3, #1
 8006820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <vPortSetupTimerInterrupt+0x34>)
 8006824:	2207      	movs	r2, #7
 8006826:	601a      	str	r2, [r3, #0]
}
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	e000e010 	.word	0xe000e010
 8006838:	e000e018 	.word	0xe000e018
 800683c:	20000048 	.word	0x20000048
 8006840:	10624dd3 	.word	0x10624dd3
 8006844:	e000e014 	.word	0xe000e014

08006848 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006848:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006858 <vPortEnableVFP+0x10>
 800684c:	6801      	ldr	r1, [r0, #0]
 800684e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006852:	6001      	str	r1, [r0, #0]
 8006854:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006856:	bf00      	nop
 8006858:	e000ed88 	.word	0xe000ed88

0800685c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006868:	f7ff fafa 	bl	8005e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800686c:	4b5b      	ldr	r3, [pc, #364]	; (80069dc <pvPortMalloc+0x180>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006874:	f000 f91a 	bl	8006aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006878:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <pvPortMalloc+0x184>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 8092 	bne.w	80069aa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01f      	beq.n	80068cc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800688c:	2208      	movs	r2, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d016      	beq.n	80068cc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f023 0307 	bic.w	r3, r3, #7
 80068a4:	3308      	adds	r3, #8
 80068a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <pvPortMalloc+0x70>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	617b      	str	r3, [r7, #20]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d06b      	beq.n	80069aa <pvPortMalloc+0x14e>
 80068d2:	4b44      	ldr	r3, [pc, #272]	; (80069e4 <pvPortMalloc+0x188>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d866      	bhi.n	80069aa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <pvPortMalloc+0x18c>)
 80068de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068e0:	4b41      	ldr	r3, [pc, #260]	; (80069e8 <pvPortMalloc+0x18c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068e6:	e004      	b.n	80068f2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <pvPortMalloc+0xa8>
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f1      	bne.n	80068e8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <pvPortMalloc+0x180>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	429a      	cmp	r2, r3
 800690c:	d04d      	beq.n	80069aa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2208      	movs	r2, #8
 8006914:	4413      	add	r3, r2
 8006916:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	2308      	movs	r3, #8
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	d921      	bls.n	8006974 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <pvPortMalloc+0x100>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	613b      	str	r3, [r7, #16]
}
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800696e:	69b8      	ldr	r0, [r7, #24]
 8006970:	f000 f8fe 	bl	8006b70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006974:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <pvPortMalloc+0x188>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <pvPortMalloc+0x188>)
 8006980:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006982:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <pvPortMalloc+0x188>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <pvPortMalloc+0x190>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d203      	bcs.n	8006996 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800698e:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <pvPortMalloc+0x188>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a16      	ldr	r2, [pc, #88]	; (80069ec <pvPortMalloc+0x190>)
 8006994:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <pvPortMalloc+0x184>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	431a      	orrs	r2, r3
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069aa:	f7ff fa67 	bl	8005e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00c      	beq.n	80069d2 <pvPortMalloc+0x176>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	b672      	cpsid	i
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	b662      	cpsie	i
 80069cc:	60fb      	str	r3, [r7, #12]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <pvPortMalloc+0x174>
	return pvReturn;
 80069d2:	69fb      	ldr	r3, [r7, #28]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	200042a8 	.word	0x200042a8
 80069e0:	200042b4 	.word	0x200042b4
 80069e4:	200042ac 	.word	0x200042ac
 80069e8:	200042a0 	.word	0x200042a0
 80069ec:	200042b0 	.word	0x200042b0

080069f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04c      	beq.n	8006a9c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a02:	2308      	movs	r3, #8
 8006a04:	425b      	negs	r3, r3
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <vPortFree+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <vPortFree+0x48>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	b672      	cpsid	i
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	b662      	cpsie	i
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <vPortFree+0x6a>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	60bb      	str	r3, [r7, #8]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <vPortFree+0xb4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d115      	bne.n	8006a9c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortFree+0xb4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a80:	f7ff f9ee 	bl	8005e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <vPortFree+0xb8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <vPortFree+0xb8>)
 8006a90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a92:	6938      	ldr	r0, [r7, #16]
 8006a94:	f000 f86c 	bl	8006b70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a98:	f7ff f9f0 	bl	8005e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a9c:	bf00      	nop
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	200042b4 	.word	0x200042b4
 8006aa8:	200042ac 	.word	0x200042ac

08006aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ab2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ab8:	4b27      	ldr	r3, [pc, #156]	; (8006b58 <prvHeapInit+0xac>)
 8006aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3307      	adds	r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <prvHeapInit+0xac>)
 8006adc:	4413      	add	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	; (8006b5c <prvHeapInit+0xb0>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aea:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <prvHeapInit+0xb0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006af8:	2208      	movs	r2, #8
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <prvHeapInit+0xb4>)
 8006b0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <prvHeapInit+0xb4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <prvHeapInit+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <prvHeapInit+0xb4>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <prvHeapInit+0xb8>)
 8006b3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <prvHeapInit+0xbc>)
 8006b42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <prvHeapInit+0xc0>)
 8006b46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b4a:	601a      	str	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	200006a0 	.word	0x200006a0
 8006b5c:	200042a0 	.word	0x200042a0
 8006b60:	200042a8 	.word	0x200042a8
 8006b64:	200042b0 	.word	0x200042b0
 8006b68:	200042ac 	.word	0x200042ac
 8006b6c:	200042b4 	.word	0x200042b4

08006b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b78:	4b28      	ldr	r3, [pc, #160]	; (8006c1c <prvInsertBlockIntoFreeList+0xac>)
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e002      	b.n	8006b84 <prvInsertBlockIntoFreeList+0x14>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d8f7      	bhi.n	8006b7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d108      	bne.n	8006bb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d118      	bne.n	8006bf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <prvInsertBlockIntoFreeList+0xb0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d00d      	beq.n	8006bee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e008      	b.n	8006c00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <prvInsertBlockIntoFreeList+0xb0>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e003      	b.n	8006c00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d002      	beq.n	8006c0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	200042a0 	.word	0x200042a0
 8006c20:	200042a8 	.word	0x200042a8

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000058 	.word	0x20000058

08006c30 <std>:
 8006c30:	2300      	movs	r3, #0
 8006c32:	b510      	push	{r4, lr}
 8006c34:	4604      	mov	r4, r0
 8006c36:	e9c0 3300 	strd	r3, r3, [r0]
 8006c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c3e:	6083      	str	r3, [r0, #8]
 8006c40:	8181      	strh	r1, [r0, #12]
 8006c42:	6643      	str	r3, [r0, #100]	; 0x64
 8006c44:	81c2      	strh	r2, [r0, #14]
 8006c46:	6183      	str	r3, [r0, #24]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	305c      	adds	r0, #92	; 0x5c
 8006c4e:	f000 f90c 	bl	8006e6a <memset>
 8006c52:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <std+0x38>)
 8006c54:	6263      	str	r3, [r4, #36]	; 0x24
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <std+0x3c>)
 8006c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <std+0x40>)
 8006c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <std+0x44>)
 8006c60:	6224      	str	r4, [r4, #32]
 8006c62:	6323      	str	r3, [r4, #48]	; 0x30
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	08007185 	.word	0x08007185
 8006c6c:	080071a7 	.word	0x080071a7
 8006c70:	080071df 	.word	0x080071df
 8006c74:	08007203 	.word	0x08007203

08006c78 <_cleanup_r>:
 8006c78:	4901      	ldr	r1, [pc, #4]	; (8006c80 <_cleanup_r+0x8>)
 8006c7a:	f000 b8af 	b.w	8006ddc <_fwalk_reent>
 8006c7e:	bf00      	nop
 8006c80:	080074dd 	.word	0x080074dd

08006c84 <__sfmoreglue>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	2268      	movs	r2, #104	; 0x68
 8006c88:	1e4d      	subs	r5, r1, #1
 8006c8a:	4355      	muls	r5, r2
 8006c8c:	460e      	mov	r6, r1
 8006c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c92:	f000 f913 	bl	8006ebc <_malloc_r>
 8006c96:	4604      	mov	r4, r0
 8006c98:	b140      	cbz	r0, 8006cac <__sfmoreglue+0x28>
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006ca0:	300c      	adds	r0, #12
 8006ca2:	60a0      	str	r0, [r4, #8]
 8006ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ca8:	f000 f8df 	bl	8006e6a <memset>
 8006cac:	4620      	mov	r0, r4
 8006cae:	bd70      	pop	{r4, r5, r6, pc}

08006cb0 <__sfp_lock_acquire>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	; (8006cb8 <__sfp_lock_acquire+0x8>)
 8006cb2:	f000 b8d8 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	200042b9 	.word	0x200042b9

08006cbc <__sfp_lock_release>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__sfp_lock_release+0x8>)
 8006cbe:	f000 b8d3 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200042b9 	.word	0x200042b9

08006cc8 <__sinit_lock_acquire>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__sinit_lock_acquire+0x8>)
 8006cca:	f000 b8cc 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006cce:	bf00      	nop
 8006cd0:	200042ba 	.word	0x200042ba

08006cd4 <__sinit_lock_release>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sinit_lock_release+0x8>)
 8006cd6:	f000 b8c7 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006cda:	bf00      	nop
 8006cdc:	200042ba 	.word	0x200042ba

08006ce0 <__sinit>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f7ff fff0 	bl	8006cc8 <__sinit_lock_acquire>
 8006ce8:	69a3      	ldr	r3, [r4, #24]
 8006cea:	b11b      	cbz	r3, 8006cf4 <__sinit+0x14>
 8006cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf0:	f7ff bff0 	b.w	8006cd4 <__sinit_lock_release>
 8006cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <__sinit+0x68>)
 8006cfc:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <__sinit+0x6c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	bf04      	itt	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	61a3      	streq	r3, [r4, #24]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 f820 	bl	8006d50 <__sfp>
 8006d10:	6060      	str	r0, [r4, #4]
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 f81c 	bl	8006d50 <__sfp>
 8006d18:	60a0      	str	r0, [r4, #8]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 f818 	bl	8006d50 <__sfp>
 8006d20:	2200      	movs	r2, #0
 8006d22:	60e0      	str	r0, [r4, #12]
 8006d24:	2104      	movs	r1, #4
 8006d26:	6860      	ldr	r0, [r4, #4]
 8006d28:	f7ff ff82 	bl	8006c30 <std>
 8006d2c:	68a0      	ldr	r0, [r4, #8]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	2109      	movs	r1, #9
 8006d32:	f7ff ff7d 	bl	8006c30 <std>
 8006d36:	68e0      	ldr	r0, [r4, #12]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	2112      	movs	r1, #18
 8006d3c:	f7ff ff78 	bl	8006c30 <std>
 8006d40:	2301      	movs	r3, #1
 8006d42:	61a3      	str	r3, [r4, #24]
 8006d44:	e7d2      	b.n	8006cec <__sinit+0xc>
 8006d46:	bf00      	nop
 8006d48:	080078ac 	.word	0x080078ac
 8006d4c:	08006c79 	.word	0x08006c79

08006d50 <__sfp>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	4607      	mov	r7, r0
 8006d54:	f7ff ffac 	bl	8006cb0 <__sfp_lock_acquire>
 8006d58:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <__sfp+0x84>)
 8006d5a:	681e      	ldr	r6, [r3, #0]
 8006d5c:	69b3      	ldr	r3, [r6, #24]
 8006d5e:	b913      	cbnz	r3, 8006d66 <__sfp+0x16>
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7ff ffbd 	bl	8006ce0 <__sinit>
 8006d66:	3648      	adds	r6, #72	; 0x48
 8006d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	d503      	bpl.n	8006d78 <__sfp+0x28>
 8006d70:	6833      	ldr	r3, [r6, #0]
 8006d72:	b30b      	cbz	r3, 8006db8 <__sfp+0x68>
 8006d74:	6836      	ldr	r6, [r6, #0]
 8006d76:	e7f7      	b.n	8006d68 <__sfp+0x18>
 8006d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d7c:	b9d5      	cbnz	r5, 8006db4 <__sfp+0x64>
 8006d7e:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <__sfp+0x88>)
 8006d80:	60e3      	str	r3, [r4, #12]
 8006d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d86:	6665      	str	r5, [r4, #100]	; 0x64
 8006d88:	f000 f86c 	bl	8006e64 <__retarget_lock_init_recursive>
 8006d8c:	f7ff ff96 	bl	8006cbc <__sfp_lock_release>
 8006d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d98:	6025      	str	r5, [r4, #0]
 8006d9a:	61a5      	str	r5, [r4, #24]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006da4:	f000 f861 	bl	8006e6a <memset>
 8006da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006db0:	4620      	mov	r0, r4
 8006db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db4:	3468      	adds	r4, #104	; 0x68
 8006db6:	e7d9      	b.n	8006d6c <__sfp+0x1c>
 8006db8:	2104      	movs	r1, #4
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f7ff ff62 	bl	8006c84 <__sfmoreglue>
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	6030      	str	r0, [r6, #0]
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1d5      	bne.n	8006d74 <__sfp+0x24>
 8006dc8:	f7ff ff78 	bl	8006cbc <__sfp_lock_release>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	e7ee      	b.n	8006db0 <__sfp+0x60>
 8006dd2:	bf00      	nop
 8006dd4:	080078ac 	.word	0x080078ac
 8006dd8:	ffff0001 	.word	0xffff0001

08006ddc <_fwalk_reent>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4606      	mov	r6, r0
 8006de2:	4688      	mov	r8, r1
 8006de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006de8:	2700      	movs	r7, #0
 8006dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dee:	f1b9 0901 	subs.w	r9, r9, #1
 8006df2:	d505      	bpl.n	8006e00 <_fwalk_reent+0x24>
 8006df4:	6824      	ldr	r4, [r4, #0]
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	d1f7      	bne.n	8006dea <_fwalk_reent+0xe>
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e00:	89ab      	ldrh	r3, [r5, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d907      	bls.n	8006e16 <_fwalk_reent+0x3a>
 8006e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <_fwalk_reent+0x3a>
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4630      	mov	r0, r6
 8006e12:	47c0      	blx	r8
 8006e14:	4307      	orrs	r7, r0
 8006e16:	3568      	adds	r5, #104	; 0x68
 8006e18:	e7e9      	b.n	8006dee <_fwalk_reent+0x12>
	...

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4d0d      	ldr	r5, [pc, #52]	; (8006e54 <__libc_init_array+0x38>)
 8006e20:	4c0d      	ldr	r4, [pc, #52]	; (8006e58 <__libc_init_array+0x3c>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	2600      	movs	r6, #0
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	4d0b      	ldr	r5, [pc, #44]	; (8006e5c <__libc_init_array+0x40>)
 8006e2e:	4c0c      	ldr	r4, [pc, #48]	; (8006e60 <__libc_init_array+0x44>)
 8006e30:	f000 fc94 	bl	800775c <_init>
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	080078b8 	.word	0x080078b8
 8006e58:	080078b8 	.word	0x080078b8
 8006e5c:	080078b8 	.word	0x080078b8
 8006e60:	080078bc 	.word	0x080078bc

08006e64 <__retarget_lock_init_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_acquire_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_release_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <memset>:
 8006e6a:	4402      	add	r2, r0
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d100      	bne.n	8006e74 <memset+0xa>
 8006e72:	4770      	bx	lr
 8006e74:	f803 1b01 	strb.w	r1, [r3], #1
 8006e78:	e7f9      	b.n	8006e6e <memset+0x4>
	...

08006e7c <sbrk_aligned>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4e0e      	ldr	r6, [pc, #56]	; (8006eb8 <sbrk_aligned+0x3c>)
 8006e80:	460c      	mov	r4, r1
 8006e82:	6831      	ldr	r1, [r6, #0]
 8006e84:	4605      	mov	r5, r0
 8006e86:	b911      	cbnz	r1, 8006e8e <sbrk_aligned+0x12>
 8006e88:	f000 f96c 	bl	8007164 <_sbrk_r>
 8006e8c:	6030      	str	r0, [r6, #0]
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 f967 	bl	8007164 <_sbrk_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d00a      	beq.n	8006eb0 <sbrk_aligned+0x34>
 8006e9a:	1cc4      	adds	r4, r0, #3
 8006e9c:	f024 0403 	bic.w	r4, r4, #3
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d007      	beq.n	8006eb4 <sbrk_aligned+0x38>
 8006ea4:	1a21      	subs	r1, r4, r0
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f95c 	bl	8007164 <_sbrk_r>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d101      	bne.n	8006eb4 <sbrk_aligned+0x38>
 8006eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	200042c0 	.word	0x200042c0

08006ebc <_malloc_r>:
 8006ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec0:	1ccd      	adds	r5, r1, #3
 8006ec2:	f025 0503 	bic.w	r5, r5, #3
 8006ec6:	3508      	adds	r5, #8
 8006ec8:	2d0c      	cmp	r5, #12
 8006eca:	bf38      	it	cc
 8006ecc:	250c      	movcc	r5, #12
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	db01      	blt.n	8006ed8 <_malloc_r+0x1c>
 8006ed4:	42a9      	cmp	r1, r5
 8006ed6:	d905      	bls.n	8006ee4 <_malloc_r+0x28>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	2600      	movs	r6, #0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee4:	4e2e      	ldr	r6, [pc, #184]	; (8006fa0 <_malloc_r+0xe4>)
 8006ee6:	f000 fbad 	bl	8007644 <__malloc_lock>
 8006eea:	6833      	ldr	r3, [r6, #0]
 8006eec:	461c      	mov	r4, r3
 8006eee:	bb34      	cbnz	r4, 8006f3e <_malloc_r+0x82>
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f7ff ffc2 	bl	8006e7c <sbrk_aligned>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	4604      	mov	r4, r0
 8006efc:	d14d      	bne.n	8006f9a <_malloc_r+0xde>
 8006efe:	6834      	ldr	r4, [r6, #0]
 8006f00:	4626      	mov	r6, r4
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d140      	bne.n	8006f88 <_malloc_r+0xcc>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	eb04 0803 	add.w	r8, r4, r3
 8006f10:	f000 f928 	bl	8007164 <_sbrk_r>
 8006f14:	4580      	cmp	r8, r0
 8006f16:	d13a      	bne.n	8006f8e <_malloc_r+0xd2>
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	3503      	adds	r5, #3
 8006f1c:	1a6d      	subs	r5, r5, r1
 8006f1e:	f025 0503 	bic.w	r5, r5, #3
 8006f22:	3508      	adds	r5, #8
 8006f24:	2d0c      	cmp	r5, #12
 8006f26:	bf38      	it	cc
 8006f28:	250c      	movcc	r5, #12
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff ffa5 	bl	8006e7c <sbrk_aligned>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d02b      	beq.n	8006f8e <_malloc_r+0xd2>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	442b      	add	r3, r5
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	e00e      	b.n	8006f5c <_malloc_r+0xa0>
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	1b52      	subs	r2, r2, r5
 8006f42:	d41e      	bmi.n	8006f82 <_malloc_r+0xc6>
 8006f44:	2a0b      	cmp	r2, #11
 8006f46:	d916      	bls.n	8006f76 <_malloc_r+0xba>
 8006f48:	1961      	adds	r1, r4, r5
 8006f4a:	42a3      	cmp	r3, r4
 8006f4c:	6025      	str	r5, [r4, #0]
 8006f4e:	bf18      	it	ne
 8006f50:	6059      	strne	r1, [r3, #4]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	bf08      	it	eq
 8006f56:	6031      	streq	r1, [r6, #0]
 8006f58:	5162      	str	r2, [r4, r5]
 8006f5a:	604b      	str	r3, [r1, #4]
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f104 060b 	add.w	r6, r4, #11
 8006f62:	f000 fb75 	bl	8007650 <__malloc_unlock>
 8006f66:	f026 0607 	bic.w	r6, r6, #7
 8006f6a:	1d23      	adds	r3, r4, #4
 8006f6c:	1af2      	subs	r2, r6, r3
 8006f6e:	d0b6      	beq.n	8006ede <_malloc_r+0x22>
 8006f70:	1b9b      	subs	r3, r3, r6
 8006f72:	50a3      	str	r3, [r4, r2]
 8006f74:	e7b3      	b.n	8006ede <_malloc_r+0x22>
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	bf0c      	ite	eq
 8006f7c:	6032      	streq	r2, [r6, #0]
 8006f7e:	605a      	strne	r2, [r3, #4]
 8006f80:	e7ec      	b.n	8006f5c <_malloc_r+0xa0>
 8006f82:	4623      	mov	r3, r4
 8006f84:	6864      	ldr	r4, [r4, #4]
 8006f86:	e7b2      	b.n	8006eee <_malloc_r+0x32>
 8006f88:	4634      	mov	r4, r6
 8006f8a:	6876      	ldr	r6, [r6, #4]
 8006f8c:	e7b9      	b.n	8006f02 <_malloc_r+0x46>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	4638      	mov	r0, r7
 8006f94:	f000 fb5c 	bl	8007650 <__malloc_unlock>
 8006f98:	e7a1      	b.n	8006ede <_malloc_r+0x22>
 8006f9a:	6025      	str	r5, [r4, #0]
 8006f9c:	e7de      	b.n	8006f5c <_malloc_r+0xa0>
 8006f9e:	bf00      	nop
 8006fa0:	200042bc 	.word	0x200042bc

08006fa4 <_puts_r>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	460e      	mov	r6, r1
 8006fa8:	4605      	mov	r5, r0
 8006faa:	b118      	cbz	r0, 8006fb4 <_puts_r+0x10>
 8006fac:	6983      	ldr	r3, [r0, #24]
 8006fae:	b90b      	cbnz	r3, 8006fb4 <_puts_r+0x10>
 8006fb0:	f7ff fe96 	bl	8006ce0 <__sinit>
 8006fb4:	69ab      	ldr	r3, [r5, #24]
 8006fb6:	68ac      	ldr	r4, [r5, #8]
 8006fb8:	b913      	cbnz	r3, 8006fc0 <_puts_r+0x1c>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff fe90 	bl	8006ce0 <__sinit>
 8006fc0:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <_puts_r+0xd0>)
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d120      	bne.n	8007008 <_puts_r+0x64>
 8006fc6:	686c      	ldr	r4, [r5, #4]
 8006fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d405      	bmi.n	8006fda <_puts_r+0x36>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0598      	lsls	r0, r3, #22
 8006fd2:	d402      	bmi.n	8006fda <_puts_r+0x36>
 8006fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fd6:	f7ff ff46 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	d51d      	bpl.n	800701c <_puts_r+0x78>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	b1db      	cbz	r3, 800701c <_puts_r+0x78>
 8006fe4:	3e01      	subs	r6, #1
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fec:	3b01      	subs	r3, #1
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	bb39      	cbnz	r1, 8007042 <_puts_r+0x9e>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da38      	bge.n	8007068 <_puts_r+0xc4>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	210a      	movs	r1, #10
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 f906 	bl	800720c <__swbuf_r>
 8007000:	3001      	adds	r0, #1
 8007002:	d011      	beq.n	8007028 <_puts_r+0x84>
 8007004:	250a      	movs	r5, #10
 8007006:	e011      	b.n	800702c <_puts_r+0x88>
 8007008:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <_puts_r+0xd4>)
 800700a:	429c      	cmp	r4, r3
 800700c:	d101      	bne.n	8007012 <_puts_r+0x6e>
 800700e:	68ac      	ldr	r4, [r5, #8]
 8007010:	e7da      	b.n	8006fc8 <_puts_r+0x24>
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <_puts_r+0xd8>)
 8007014:	429c      	cmp	r4, r3
 8007016:	bf08      	it	eq
 8007018:	68ec      	ldreq	r4, [r5, #12]
 800701a:	e7d5      	b.n	8006fc8 <_puts_r+0x24>
 800701c:	4621      	mov	r1, r4
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f958 	bl	80072d4 <__swsetup_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0dd      	beq.n	8006fe4 <_puts_r+0x40>
 8007028:	f04f 35ff 	mov.w	r5, #4294967295
 800702c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800702e:	07da      	lsls	r2, r3, #31
 8007030:	d405      	bmi.n	800703e <_puts_r+0x9a>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	059b      	lsls	r3, r3, #22
 8007036:	d402      	bmi.n	800703e <_puts_r+0x9a>
 8007038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703a:	f7ff ff15 	bl	8006e68 <__retarget_lock_release_recursive>
 800703e:	4628      	mov	r0, r5
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	2b00      	cmp	r3, #0
 8007044:	da04      	bge.n	8007050 <_puts_r+0xac>
 8007046:	69a2      	ldr	r2, [r4, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	dc06      	bgt.n	800705a <_puts_r+0xb6>
 800704c:	290a      	cmp	r1, #10
 800704e:	d004      	beq.n	800705a <_puts_r+0xb6>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	7019      	strb	r1, [r3, #0]
 8007058:	e7c5      	b.n	8006fe6 <_puts_r+0x42>
 800705a:	4622      	mov	r2, r4
 800705c:	4628      	mov	r0, r5
 800705e:	f000 f8d5 	bl	800720c <__swbuf_r>
 8007062:	3001      	adds	r0, #1
 8007064:	d1bf      	bne.n	8006fe6 <_puts_r+0x42>
 8007066:	e7df      	b.n	8007028 <_puts_r+0x84>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	250a      	movs	r5, #10
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	701d      	strb	r5, [r3, #0]
 8007072:	e7db      	b.n	800702c <_puts_r+0x88>
 8007074:	0800786c 	.word	0x0800786c
 8007078:	0800788c 	.word	0x0800788c
 800707c:	0800784c 	.word	0x0800784c

08007080 <puts>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <puts+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f7ff bf8d 	b.w	8006fa4 <_puts_r>
 800708a:	bf00      	nop
 800708c:	20000058 	.word	0x20000058

08007090 <cleanup_glue>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	6809      	ldr	r1, [r1, #0]
 8007096:	4605      	mov	r5, r0
 8007098:	b109      	cbz	r1, 800709e <cleanup_glue+0xe>
 800709a:	f7ff fff9 	bl	8007090 <cleanup_glue>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a6:	f000 bad9 	b.w	800765c <_free_r>
	...

080070ac <_reclaim_reent>:
 80070ac:	4b2c      	ldr	r3, [pc, #176]	; (8007160 <_reclaim_reent+0xb4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4283      	cmp	r3, r0
 80070b2:	b570      	push	{r4, r5, r6, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	d051      	beq.n	800715c <_reclaim_reent+0xb0>
 80070b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070ba:	b143      	cbz	r3, 80070ce <_reclaim_reent+0x22>
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d14a      	bne.n	8007158 <_reclaim_reent+0xac>
 80070c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	b111      	cbz	r1, 80070ce <_reclaim_reent+0x22>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fac7 	bl	800765c <_free_r>
 80070ce:	6961      	ldr	r1, [r4, #20]
 80070d0:	b111      	cbz	r1, 80070d8 <_reclaim_reent+0x2c>
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fac2 	bl	800765c <_free_r>
 80070d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070da:	b111      	cbz	r1, 80070e2 <_reclaim_reent+0x36>
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fabd 	bl	800765c <_free_r>
 80070e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070e4:	b111      	cbz	r1, 80070ec <_reclaim_reent+0x40>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 fab8 	bl	800765c <_free_r>
 80070ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80070ee:	b111      	cbz	r1, 80070f6 <_reclaim_reent+0x4a>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fab3 	bl	800765c <_free_r>
 80070f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80070f8:	b111      	cbz	r1, 8007100 <_reclaim_reent+0x54>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 faae 	bl	800765c <_free_r>
 8007100:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007102:	b111      	cbz	r1, 800710a <_reclaim_reent+0x5e>
 8007104:	4620      	mov	r0, r4
 8007106:	f000 faa9 	bl	800765c <_free_r>
 800710a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800710c:	b111      	cbz	r1, 8007114 <_reclaim_reent+0x68>
 800710e:	4620      	mov	r0, r4
 8007110:	f000 faa4 	bl	800765c <_free_r>
 8007114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007116:	b111      	cbz	r1, 800711e <_reclaim_reent+0x72>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fa9f 	bl	800765c <_free_r>
 800711e:	69a3      	ldr	r3, [r4, #24]
 8007120:	b1e3      	cbz	r3, 800715c <_reclaim_reent+0xb0>
 8007122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007124:	4620      	mov	r0, r4
 8007126:	4798      	blx	r3
 8007128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800712a:	b1b9      	cbz	r1, 800715c <_reclaim_reent+0xb0>
 800712c:	4620      	mov	r0, r4
 800712e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007132:	f7ff bfad 	b.w	8007090 <cleanup_glue>
 8007136:	5949      	ldr	r1, [r1, r5]
 8007138:	b941      	cbnz	r1, 800714c <_reclaim_reent+0xa0>
 800713a:	3504      	adds	r5, #4
 800713c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800713e:	2d80      	cmp	r5, #128	; 0x80
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	d1f8      	bne.n	8007136 <_reclaim_reent+0x8a>
 8007144:	4620      	mov	r0, r4
 8007146:	f000 fa89 	bl	800765c <_free_r>
 800714a:	e7ba      	b.n	80070c2 <_reclaim_reent+0x16>
 800714c:	680e      	ldr	r6, [r1, #0]
 800714e:	4620      	mov	r0, r4
 8007150:	f000 fa84 	bl	800765c <_free_r>
 8007154:	4631      	mov	r1, r6
 8007156:	e7ef      	b.n	8007138 <_reclaim_reent+0x8c>
 8007158:	2500      	movs	r5, #0
 800715a:	e7ef      	b.n	800713c <_reclaim_reent+0x90>
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	bf00      	nop
 8007160:	20000058 	.word	0x20000058

08007164 <_sbrk_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d06      	ldr	r5, [pc, #24]	; (8007180 <_sbrk_r+0x1c>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fa ff8c 	bl	800208c <_sbrk>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_sbrk_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_sbrk_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	200042c4 	.word	0x200042c4

08007184 <__sread>:
 8007184:	b510      	push	{r4, lr}
 8007186:	460c      	mov	r4, r1
 8007188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718c:	f000 fab2 	bl	80076f4 <_read_r>
 8007190:	2800      	cmp	r0, #0
 8007192:	bfab      	itete	ge
 8007194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007196:	89a3      	ldrhlt	r3, [r4, #12]
 8007198:	181b      	addge	r3, r3, r0
 800719a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800719e:	bfac      	ite	ge
 80071a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071a2:	81a3      	strhlt	r3, [r4, #12]
 80071a4:	bd10      	pop	{r4, pc}

080071a6 <__swrite>:
 80071a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071aa:	461f      	mov	r7, r3
 80071ac:	898b      	ldrh	r3, [r1, #12]
 80071ae:	05db      	lsls	r3, r3, #23
 80071b0:	4605      	mov	r5, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	4616      	mov	r6, r2
 80071b6:	d505      	bpl.n	80071c4 <__swrite+0x1e>
 80071b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071bc:	2302      	movs	r3, #2
 80071be:	2200      	movs	r2, #0
 80071c0:	f000 f9c8 	bl	8007554 <_lseek_r>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	4632      	mov	r2, r6
 80071d2:	463b      	mov	r3, r7
 80071d4:	4628      	mov	r0, r5
 80071d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071da:	f000 b869 	b.w	80072b0 <_write_r>

080071de <__sseek>:
 80071de:	b510      	push	{r4, lr}
 80071e0:	460c      	mov	r4, r1
 80071e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e6:	f000 f9b5 	bl	8007554 <_lseek_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	bf15      	itete	ne
 80071f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80071f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071fa:	81a3      	strheq	r3, [r4, #12]
 80071fc:	bf18      	it	ne
 80071fe:	81a3      	strhne	r3, [r4, #12]
 8007200:	bd10      	pop	{r4, pc}

08007202 <__sclose>:
 8007202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007206:	f000 b8d3 	b.w	80073b0 <_close_r>
	...

0800720c <__swbuf_r>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	460e      	mov	r6, r1
 8007210:	4614      	mov	r4, r2
 8007212:	4605      	mov	r5, r0
 8007214:	b118      	cbz	r0, 800721e <__swbuf_r+0x12>
 8007216:	6983      	ldr	r3, [r0, #24]
 8007218:	b90b      	cbnz	r3, 800721e <__swbuf_r+0x12>
 800721a:	f7ff fd61 	bl	8006ce0 <__sinit>
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <__swbuf_r+0x98>)
 8007220:	429c      	cmp	r4, r3
 8007222:	d12b      	bne.n	800727c <__swbuf_r+0x70>
 8007224:	686c      	ldr	r4, [r5, #4]
 8007226:	69a3      	ldr	r3, [r4, #24]
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	071a      	lsls	r2, r3, #28
 800722e:	d52f      	bpl.n	8007290 <__swbuf_r+0x84>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	b36b      	cbz	r3, 8007290 <__swbuf_r+0x84>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	1ac0      	subs	r0, r0, r3
 800723a:	6963      	ldr	r3, [r4, #20]
 800723c:	b2f6      	uxtb	r6, r6
 800723e:	4283      	cmp	r3, r0
 8007240:	4637      	mov	r7, r6
 8007242:	dc04      	bgt.n	800724e <__swbuf_r+0x42>
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	f000 f948 	bl	80074dc <_fflush_r>
 800724c:	bb30      	cbnz	r0, 800729c <__swbuf_r+0x90>
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	3b01      	subs	r3, #1
 8007252:	60a3      	str	r3, [r4, #8]
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	701e      	strb	r6, [r3, #0]
 800725c:	6963      	ldr	r3, [r4, #20]
 800725e:	3001      	adds	r0, #1
 8007260:	4283      	cmp	r3, r0
 8007262:	d004      	beq.n	800726e <__swbuf_r+0x62>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	07db      	lsls	r3, r3, #31
 8007268:	d506      	bpl.n	8007278 <__swbuf_r+0x6c>
 800726a:	2e0a      	cmp	r6, #10
 800726c:	d104      	bne.n	8007278 <__swbuf_r+0x6c>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f933 	bl	80074dc <_fflush_r>
 8007276:	b988      	cbnz	r0, 800729c <__swbuf_r+0x90>
 8007278:	4638      	mov	r0, r7
 800727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <__swbuf_r+0x9c>)
 800727e:	429c      	cmp	r4, r3
 8007280:	d101      	bne.n	8007286 <__swbuf_r+0x7a>
 8007282:	68ac      	ldr	r4, [r5, #8]
 8007284:	e7cf      	b.n	8007226 <__swbuf_r+0x1a>
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <__swbuf_r+0xa0>)
 8007288:	429c      	cmp	r4, r3
 800728a:	bf08      	it	eq
 800728c:	68ec      	ldreq	r4, [r5, #12]
 800728e:	e7ca      	b.n	8007226 <__swbuf_r+0x1a>
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f81e 	bl	80072d4 <__swsetup_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	d0cb      	beq.n	8007234 <__swbuf_r+0x28>
 800729c:	f04f 37ff 	mov.w	r7, #4294967295
 80072a0:	e7ea      	b.n	8007278 <__swbuf_r+0x6c>
 80072a2:	bf00      	nop
 80072a4:	0800786c 	.word	0x0800786c
 80072a8:	0800788c 	.word	0x0800788c
 80072ac:	0800784c 	.word	0x0800784c

080072b0 <_write_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	; (80072d0 <_write_r+0x20>)
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	602a      	str	r2, [r5, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7fa fe93 	bl	8001fea <_write>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_write_r+0x1e>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_write_r+0x1e>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	200042c4 	.word	0x200042c4

080072d4 <__swsetup_r>:
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <__swsetup_r+0xcc>)
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	681d      	ldr	r5, [r3, #0]
 80072da:	4606      	mov	r6, r0
 80072dc:	460c      	mov	r4, r1
 80072de:	b125      	cbz	r5, 80072ea <__swsetup_r+0x16>
 80072e0:	69ab      	ldr	r3, [r5, #24]
 80072e2:	b913      	cbnz	r3, 80072ea <__swsetup_r+0x16>
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7ff fcfb 	bl	8006ce0 <__sinit>
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <__swsetup_r+0xd0>)
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d10f      	bne.n	8007310 <__swsetup_r+0x3c>
 80072f0:	686c      	ldr	r4, [r5, #4]
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f8:	0719      	lsls	r1, r3, #28
 80072fa:	d42c      	bmi.n	8007356 <__swsetup_r+0x82>
 80072fc:	06dd      	lsls	r5, r3, #27
 80072fe:	d411      	bmi.n	8007324 <__swsetup_r+0x50>
 8007300:	2309      	movs	r3, #9
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	e03e      	b.n	800738e <__swsetup_r+0xba>
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <__swsetup_r+0xd4>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <__swsetup_r+0x46>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7eb      	b.n	80072f2 <__swsetup_r+0x1e>
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <__swsetup_r+0xd8>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7e6      	b.n	80072f2 <__swsetup_r+0x1e>
 8007324:	0758      	lsls	r0, r3, #29
 8007326:	d512      	bpl.n	800734e <__swsetup_r+0x7a>
 8007328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732a:	b141      	cbz	r1, 800733e <__swsetup_r+0x6a>
 800732c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <__swsetup_r+0x66>
 8007334:	4630      	mov	r0, r6
 8007336:	f000 f991 	bl	800765c <_free_r>
 800733a:	2300      	movs	r3, #0
 800733c:	6363      	str	r3, [r4, #52]	; 0x34
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	2300      	movs	r3, #0
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0308 	orr.w	r3, r3, #8
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	b94b      	cbnz	r3, 800736e <__swsetup_r+0x9a>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007364:	d003      	beq.n	800736e <__swsetup_r+0x9a>
 8007366:	4621      	mov	r1, r4
 8007368:	4630      	mov	r0, r6
 800736a:	f000 f92b 	bl	80075c4 <__smakebuf_r>
 800736e:	89a0      	ldrh	r0, [r4, #12]
 8007370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007374:	f010 0301 	ands.w	r3, r0, #1
 8007378:	d00a      	beq.n	8007390 <__swsetup_r+0xbc>
 800737a:	2300      	movs	r3, #0
 800737c:	60a3      	str	r3, [r4, #8]
 800737e:	6963      	ldr	r3, [r4, #20]
 8007380:	425b      	negs	r3, r3
 8007382:	61a3      	str	r3, [r4, #24]
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	b943      	cbnz	r3, 800739a <__swsetup_r+0xc6>
 8007388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800738c:	d1ba      	bne.n	8007304 <__swsetup_r+0x30>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	0781      	lsls	r1, r0, #30
 8007392:	bf58      	it	pl
 8007394:	6963      	ldrpl	r3, [r4, #20]
 8007396:	60a3      	str	r3, [r4, #8]
 8007398:	e7f4      	b.n	8007384 <__swsetup_r+0xb0>
 800739a:	2000      	movs	r0, #0
 800739c:	e7f7      	b.n	800738e <__swsetup_r+0xba>
 800739e:	bf00      	nop
 80073a0:	20000058 	.word	0x20000058
 80073a4:	0800786c 	.word	0x0800786c
 80073a8:	0800788c 	.word	0x0800788c
 80073ac:	0800784c 	.word	0x0800784c

080073b0 <_close_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d06      	ldr	r5, [pc, #24]	; (80073cc <_close_r+0x1c>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fa fe31 	bl	8002022 <_close>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_close_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_close_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200042c4 	.word	0x200042c4

080073d0 <__sflush_r>:
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	0710      	lsls	r0, r2, #28
 80073da:	460c      	mov	r4, r1
 80073dc:	d458      	bmi.n	8007490 <__sflush_r+0xc0>
 80073de:	684b      	ldr	r3, [r1, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc05      	bgt.n	80073f0 <__sflush_r+0x20>
 80073e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc02      	bgt.n	80073f0 <__sflush_r+0x20>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d0f9      	beq.n	80073ea <__sflush_r+0x1a>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073fc:	682f      	ldr	r7, [r5, #0]
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	d032      	beq.n	8007468 <__sflush_r+0x98>
 8007402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	075a      	lsls	r2, r3, #29
 8007408:	d505      	bpl.n	8007416 <__sflush_r+0x46>
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	1ac0      	subs	r0, r0, r3
 800740e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007410:	b10b      	cbz	r3, 8007416 <__sflush_r+0x46>
 8007412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007414:	1ac0      	subs	r0, r0, r3
 8007416:	2300      	movs	r3, #0
 8007418:	4602      	mov	r2, r0
 800741a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741c:	6a21      	ldr	r1, [r4, #32]
 800741e:	4628      	mov	r0, r5
 8007420:	47b0      	blx	r6
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	d106      	bne.n	8007436 <__sflush_r+0x66>
 8007428:	6829      	ldr	r1, [r5, #0]
 800742a:	291d      	cmp	r1, #29
 800742c:	d82c      	bhi.n	8007488 <__sflush_r+0xb8>
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <__sflush_r+0x108>)
 8007430:	40ca      	lsrs	r2, r1
 8007432:	07d6      	lsls	r6, r2, #31
 8007434:	d528      	bpl.n	8007488 <__sflush_r+0xb8>
 8007436:	2200      	movs	r2, #0
 8007438:	6062      	str	r2, [r4, #4]
 800743a:	04d9      	lsls	r1, r3, #19
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	d504      	bpl.n	800744c <__sflush_r+0x7c>
 8007442:	1c42      	adds	r2, r0, #1
 8007444:	d101      	bne.n	800744a <__sflush_r+0x7a>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	b903      	cbnz	r3, 800744c <__sflush_r+0x7c>
 800744a:	6560      	str	r0, [r4, #84]	; 0x54
 800744c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800744e:	602f      	str	r7, [r5, #0]
 8007450:	2900      	cmp	r1, #0
 8007452:	d0ca      	beq.n	80073ea <__sflush_r+0x1a>
 8007454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007458:	4299      	cmp	r1, r3
 800745a:	d002      	beq.n	8007462 <__sflush_r+0x92>
 800745c:	4628      	mov	r0, r5
 800745e:	f000 f8fd 	bl	800765c <_free_r>
 8007462:	2000      	movs	r0, #0
 8007464:	6360      	str	r0, [r4, #52]	; 0x34
 8007466:	e7c1      	b.n	80073ec <__sflush_r+0x1c>
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	2301      	movs	r3, #1
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	1c41      	adds	r1, r0, #1
 8007472:	d1c7      	bne.n	8007404 <__sflush_r+0x34>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c4      	beq.n	8007404 <__sflush_r+0x34>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xb2>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d101      	bne.n	8007486 <__sflush_r+0xb6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	e7b1      	b.n	80073ea <__sflush_r+0x1a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7ad      	b.n	80073ec <__sflush_r+0x1c>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0a9      	beq.n	80073ea <__sflush_r+0x1a>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	bf08      	it	eq
 800749c:	694b      	ldreq	r3, [r1, #20]
 800749e:	600f      	str	r7, [r1, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2300      	movne	r3, #0
 80074a4:	eba6 0807 	sub.w	r8, r6, r7
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	dd9c      	ble.n	80073ea <__sflush_r+0x1a>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b4:	4643      	mov	r3, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc06      	bgt.n	80074ce <__sflush_r+0xfe>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e78e      	b.n	80073ec <__sflush_r+0x1c>
 80074ce:	4407      	add	r7, r0
 80074d0:	eba8 0800 	sub.w	r8, r8, r0
 80074d4:	e7e9      	b.n	80074aa <__sflush_r+0xda>
 80074d6:	bf00      	nop
 80074d8:	20400001 	.word	0x20400001

080074dc <_fflush_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b913      	cbnz	r3, 80074ec <_fflush_r+0x10>
 80074e6:	2500      	movs	r5, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	b118      	cbz	r0, 80074f6 <_fflush_r+0x1a>
 80074ee:	6983      	ldr	r3, [r0, #24]
 80074f0:	b90b      	cbnz	r3, 80074f6 <_fflush_r+0x1a>
 80074f2:	f7ff fbf5 	bl	8006ce0 <__sinit>
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <_fflush_r+0x6c>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	d11b      	bne.n	8007534 <_fflush_r+0x58>
 80074fc:	686c      	ldr	r4, [r5, #4]
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0ef      	beq.n	80074e6 <_fflush_r+0xa>
 8007506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007508:	07d0      	lsls	r0, r2, #31
 800750a:	d404      	bmi.n	8007516 <_fflush_r+0x3a>
 800750c:	0599      	lsls	r1, r3, #22
 800750e:	d402      	bmi.n	8007516 <_fflush_r+0x3a>
 8007510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007512:	f7ff fca8 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8007516:	4628      	mov	r0, r5
 8007518:	4621      	mov	r1, r4
 800751a:	f7ff ff59 	bl	80073d0 <__sflush_r>
 800751e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007520:	07da      	lsls	r2, r3, #31
 8007522:	4605      	mov	r5, r0
 8007524:	d4e0      	bmi.n	80074e8 <_fflush_r+0xc>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	059b      	lsls	r3, r3, #22
 800752a:	d4dd      	bmi.n	80074e8 <_fflush_r+0xc>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f7ff fc9b 	bl	8006e68 <__retarget_lock_release_recursive>
 8007532:	e7d9      	b.n	80074e8 <_fflush_r+0xc>
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <_fflush_r+0x70>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d101      	bne.n	800753e <_fflush_r+0x62>
 800753a:	68ac      	ldr	r4, [r5, #8]
 800753c:	e7df      	b.n	80074fe <_fflush_r+0x22>
 800753e:	4b04      	ldr	r3, [pc, #16]	; (8007550 <_fflush_r+0x74>)
 8007540:	429c      	cmp	r4, r3
 8007542:	bf08      	it	eq
 8007544:	68ec      	ldreq	r4, [r5, #12]
 8007546:	e7da      	b.n	80074fe <_fflush_r+0x22>
 8007548:	0800786c 	.word	0x0800786c
 800754c:	0800788c 	.word	0x0800788c
 8007550:	0800784c 	.word	0x0800784c

08007554 <_lseek_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	; (8007574 <_lseek_r+0x20>)
 8007558:	4604      	mov	r4, r0
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	2200      	movs	r2, #0
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	f7fa fd84 	bl	8002070 <_lseek>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_lseek_r+0x1e>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_lseek_r+0x1e>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	200042c4 	.word	0x200042c4

08007578 <__swhatbuf_r>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	460e      	mov	r6, r1
 800757c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007580:	2900      	cmp	r1, #0
 8007582:	b096      	sub	sp, #88	; 0x58
 8007584:	4614      	mov	r4, r2
 8007586:	461d      	mov	r5, r3
 8007588:	da08      	bge.n	800759c <__swhatbuf_r+0x24>
 800758a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	061a      	lsls	r2, r3, #24
 8007594:	d410      	bmi.n	80075b8 <__swhatbuf_r+0x40>
 8007596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759a:	e00e      	b.n	80075ba <__swhatbuf_r+0x42>
 800759c:	466a      	mov	r2, sp
 800759e:	f000 f8bb 	bl	8007718 <_fstat_r>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dbf1      	blt.n	800758a <__swhatbuf_r+0x12>
 80075a6:	9a01      	ldr	r2, [sp, #4]
 80075a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075b0:	425a      	negs	r2, r3
 80075b2:	415a      	adcs	r2, r3
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	e7ee      	b.n	8007596 <__swhatbuf_r+0x1e>
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	2000      	movs	r0, #0
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	b016      	add	sp, #88	; 0x58
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080075c4 <__smakebuf_r>:
 80075c4:	898b      	ldrh	r3, [r1, #12]
 80075c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c8:	079d      	lsls	r5, r3, #30
 80075ca:	4606      	mov	r6, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	d507      	bpl.n	80075e0 <__smakebuf_r+0x1c>
 80075d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2301      	movs	r3, #1
 80075da:	6163      	str	r3, [r4, #20]
 80075dc:	b002      	add	sp, #8
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	ab01      	add	r3, sp, #4
 80075e2:	466a      	mov	r2, sp
 80075e4:	f7ff ffc8 	bl	8007578 <__swhatbuf_r>
 80075e8:	9900      	ldr	r1, [sp, #0]
 80075ea:	4605      	mov	r5, r0
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff fc65 	bl	8006ebc <_malloc_r>
 80075f2:	b948      	cbnz	r0, 8007608 <__smakebuf_r+0x44>
 80075f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f8:	059a      	lsls	r2, r3, #22
 80075fa:	d4ef      	bmi.n	80075dc <__smakebuf_r+0x18>
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	e7e3      	b.n	80075d0 <__smakebuf_r+0xc>
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <__smakebuf_r+0x7c>)
 800760a:	62b3      	str	r3, [r6, #40]	; 0x28
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	6020      	str	r0, [r4, #0]
 8007610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007614:	81a3      	strh	r3, [r4, #12]
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	6163      	str	r3, [r4, #20]
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	6120      	str	r0, [r4, #16]
 800761e:	b15b      	cbz	r3, 8007638 <__smakebuf_r+0x74>
 8007620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f889 	bl	800773c <_isatty_r>
 800762a:	b128      	cbz	r0, 8007638 <__smakebuf_r+0x74>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f023 0303 	bic.w	r3, r3, #3
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	89a0      	ldrh	r0, [r4, #12]
 800763a:	4305      	orrs	r5, r0
 800763c:	81a5      	strh	r5, [r4, #12]
 800763e:	e7cd      	b.n	80075dc <__smakebuf_r+0x18>
 8007640:	08006c79 	.word	0x08006c79

08007644 <__malloc_lock>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__malloc_lock+0x8>)
 8007646:	f7ff bc0e 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	200042b8 	.word	0x200042b8

08007650 <__malloc_unlock>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__malloc_unlock+0x8>)
 8007652:	f7ff bc09 	b.w	8006e68 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	200042b8 	.word	0x200042b8

0800765c <_free_r>:
 800765c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800765e:	2900      	cmp	r1, #0
 8007660:	d044      	beq.n	80076ec <_free_r+0x90>
 8007662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007666:	9001      	str	r0, [sp, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f1a1 0404 	sub.w	r4, r1, #4
 800766e:	bfb8      	it	lt
 8007670:	18e4      	addlt	r4, r4, r3
 8007672:	f7ff ffe7 	bl	8007644 <__malloc_lock>
 8007676:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <_free_r+0x94>)
 8007678:	9801      	ldr	r0, [sp, #4]
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x30>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	b003      	add	sp, #12
 8007684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007688:	f7ff bfe2 	b.w	8007650 <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x46>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	1961      	adds	r1, r4, r5
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1949      	addeq	r1, r1, r5
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x22>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x50>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x46>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1855      	adds	r5, r2, r1
 80076b0:	42a5      	cmp	r5, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x70>
 80076b4:	6824      	ldr	r4, [r4, #0]
 80076b6:	4421      	add	r1, r4
 80076b8:	1854      	adds	r4, r2, r1
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x26>
 80076c0:	681c      	ldr	r4, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	6053      	str	r3, [r2, #4]
 80076c6:	4421      	add	r1, r4
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x26>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x78>
 80076ce:	230c      	movs	r3, #12
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x26>
 80076d4:	6825      	ldr	r5, [r4, #0]
 80076d6:	1961      	adds	r1, r4, r5
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf04      	itt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	bf04      	itt	eq
 80076e4:	1949      	addeq	r1, r1, r5
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	6054      	str	r4, [r2, #4]
 80076ea:	e7ca      	b.n	8007682 <_free_r+0x26>
 80076ec:	b003      	add	sp, #12
 80076ee:	bd30      	pop	{r4, r5, pc}
 80076f0:	200042bc 	.word	0x200042bc

080076f4 <_read_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	; (8007714 <_read_r+0x20>)
 80076f8:	4604      	mov	r4, r0
 80076fa:	4608      	mov	r0, r1
 80076fc:	4611      	mov	r1, r2
 80076fe:	2200      	movs	r2, #0
 8007700:	602a      	str	r2, [r5, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f7fa fc54 	bl	8001fb0 <_read>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_read_r+0x1e>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_read_r+0x1e>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	200042c4 	.word	0x200042c4

08007718 <_fstat_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d07      	ldr	r5, [pc, #28]	; (8007738 <_fstat_r+0x20>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f7fa fc88 	bl	800203a <_fstat>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d102      	bne.n	8007734 <_fstat_r+0x1c>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b103      	cbz	r3, 8007734 <_fstat_r+0x1c>
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	200042c4 	.word	0x200042c4

0800773c <_isatty_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d06      	ldr	r5, [pc, #24]	; (8007758 <_isatty_r+0x1c>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	f7fa fc87 	bl	800205a <_isatty>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_isatty_r+0x1a>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_isatty_r+0x1a>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200042c4 	.word	0x200042c4

0800775c <_init>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr

08007768 <_fini>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr
